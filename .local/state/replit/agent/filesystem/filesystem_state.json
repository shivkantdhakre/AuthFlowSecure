{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: 'email' },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: 'Invalid email or password' });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, firstName, lastName, role = 'student' } = req.body;\n      \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const user = await storage.createUser({\n        email,\n        password: await hashPassword(password),\n        firstName,\n        lastName,\n        role\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({ \n          id: user.id, \n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName, \n          role: user.role \n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) return res.status(401).json({ message: info.message || 'Login failed' });\n      \n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(200).json({ \n          id: user.id, \n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName, \n          role: user.role \n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    const user = req.user!;\n    res.json({ \n      id: user.id, \n      email: user.email, \n      firstName: user.firstName, \n      lastName: user.lastName, \n      role: user.role \n    });\n  });\n}\n\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  next();\n}\n\nexport function requireRole(role: string) {\n  return (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    if (req.user.role !== role) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n}\n","size_bytes":4574},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, requireRole } from \"./auth\";\nimport { setupWebSocket } from \"./websocket\";\nimport multer from \"multer\";\nimport path from \"path\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Class routes\n  app.get(\"/api/classes\", async (req, res) => {\n    try {\n      const classes = await storage.getAllClasses();\n      res.json(classes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get(\"/api/classes/:id\", async (req, res) => {\n    try {\n      const classData = await storage.getClass(req.params.id);\n      if (!classData) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(classData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch class\" });\n    }\n  });\n\n  app.post(\"/api/classes\", requireAuth, requireRole('teacher'), async (req, res) => {\n    try {\n      const classData = {\n        ...req.body,\n        teacherId: req.user!.id,\n        date: new Date(req.body.date)\n      };\n      const newClass = await storage.createClass(classData);\n      res.status(201).json(newClass);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create class\" });\n    }\n  });\n\n  app.put(\"/api/classes/:id\", requireAuth, requireRole('teacher'), async (req, res) => {\n    try {\n      const updatedClass = await storage.updateClass(req.params.id, req.body);\n      if (!updatedClass) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.json(updatedClass);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update class\" });\n    }\n  });\n\n  app.delete(\"/api/classes/:id\", requireAuth, requireRole('teacher'), async (req, res) => {\n    try {\n      const deleted = await storage.deleteClass(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      res.sendStatus(204);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete class\" });\n    }\n  });\n\n  // Enrollment routes\n  app.post(\"/api/classes/:id/enroll\", requireAuth, requireRole('student'), async (req, res) => {\n    try {\n      const studentId = req.user!.id;\n      const classId = req.params.id;\n      \n      // Check if already enrolled\n      const existingEnrollment = await storage.checkEnrollment(studentId, classId);\n      if (existingEnrollment) {\n        return res.status(400).json({ message: \"Already enrolled in this class\" });\n      }\n\n      const enrollment = await storage.enrollStudent({ studentId, classId });\n      res.status(201).json(enrollment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to enroll in class\" });\n    }\n  });\n\n  app.get(\"/api/enrollments\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const enrollments = await storage.getEnrollmentsByStudent(userId);\n      res.json(enrollments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch enrollments\" });\n    }\n  });\n\n  // Content routes\n  app.get(\"/api/classes/:id/content\", requireAuth, async (req, res) => {\n    try {\n      const content = await storage.getContentByClass(req.params.id);\n      res.json(content);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch content\" });\n    }\n  });\n\n  app.post(\"/api/classes/:id/content\", requireAuth, requireRole('teacher'), upload.single('file'), async (req, res) => {\n    try {\n      const { title, type, content: textContent } = req.body;\n      const classId = req.params.id;\n      \n      const contentData = {\n        classId,\n        title,\n        type,\n        fileUrl: req.file ? `/uploads/${req.file.filename}` : null,\n        content: textContent || null\n      };\n\n      const newContent = await storage.createContent(contentData);\n      res.status(201).json(newContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create content\" });\n    }\n  });\n\n  // Chat routes\n  app.get(\"/api/classes/:id/messages\", requireAuth, async (req, res) => {\n    try {\n      const messages = await storage.getMessagesByClass(req.params.id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Rating routes\n  app.post(\"/api/ratings\", requireAuth, requireRole('student'), async (req, res) => {\n    try {\n      const { teacherId, classId, rating, comment } = req.body;\n      const studentId = req.user!.id;\n      \n      const newRating = await storage.createRating({\n        studentId,\n        teacherId,\n        classId,\n        rating,\n        comment\n      });\n      \n      res.status(201).json(newRating);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create rating\" });\n    }\n  });\n\n  app.get(\"/api/teachers/:id/ratings\", async (req, res) => {\n    try {\n      const ratings = await storage.getRatingsByTeacher(req.params.id);\n      const averageRating = await storage.getAverageRating(req.params.id);\n      res.json({ ratings, averageRating });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ratings\" });\n    }\n  });\n\n  // Statistics routes\n  app.get(\"/api/stats\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const userStats = await storage.getUserStats();\n      const classStats = await storage.getClassStats();\n      res.json({ ...userStats, ...classStats });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Teacher-specific routes\n  app.get(\"/api/teacher/classes\", requireAuth, requireRole('teacher'), async (req, res) => {\n    try {\n      const classes = await storage.getClassesByTeacher(req.user!.id);\n      res.json(classes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teacher classes\" });\n    }\n  });\n\n  // Serve uploaded files\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  const httpServer = createServer(app);\n  \n  // Setup WebSocket\n  setupWebSocket(httpServer);\n\n  return httpServer;\n}\n","size_bytes":6492},"server/storage.ts":{"content":"import { \n  users, \n  classes, \n  enrollments, \n  content, \n  messages, \n  ratings,\n  type User, \n  type InsertUser,\n  type Class,\n  type InsertClass,\n  type Enrollment,\n  type InsertEnrollment,\n  type Content,\n  type InsertContent,\n  type Message,\n  type InsertMessage,\n  type Rating,\n  type InsertRating\n} from \"@shared/schema\";\nimport { db, pool } from \"./db\";\nimport { eq, desc, count, avg, and } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Class operations\n  getClass(id: string): Promise<Class | undefined>;\n  getClassesByTeacher(teacherId: string): Promise<Class[]>;\n  getAllClasses(): Promise<Class[]>;\n  createClass(classData: InsertClass): Promise<Class>;\n  updateClass(id: string, updates: Partial<InsertClass>): Promise<Class | undefined>;\n  deleteClass(id: string): Promise<boolean>;\n  \n  // Enrollment operations\n  enrollStudent(enrollment: InsertEnrollment): Promise<Enrollment>;\n  getEnrollmentsByStudent(studentId: string): Promise<Enrollment[]>;\n  getEnrollmentsByClass(classId: string): Promise<Enrollment[]>;\n  checkEnrollment(studentId: string, classId: string): Promise<Enrollment | undefined>;\n  \n  // Content operations\n  getContentByClass(classId: string): Promise<Content[]>;\n  createContent(contentData: InsertContent): Promise<Content>;\n  \n  // Message operations\n  getMessagesByClass(classId: string): Promise<Message[]>;\n  createMessage(messageData: InsertMessage): Promise<Message>;\n  \n  // Rating operations\n  createRating(ratingData: InsertRating): Promise<Rating>;\n  getRatingsByTeacher(teacherId: string): Promise<Rating[]>;\n  getAverageRating(teacherId: string): Promise<number>;\n  \n  // Statistics\n  getUserStats(): Promise<{ totalUsers: number; totalStudents: number; totalTeachers: number }>;\n  getClassStats(): Promise<{ totalClasses: number; liveClasses: number }>;\n  \n  sessionStore: connectPg.PGStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: connectPg.PGStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async getClass(id: string): Promise<Class | undefined> {\n    const [classData] = await db.select().from(classes).where(eq(classes.id, id));\n    return classData;\n  }\n\n  async getClassesByTeacher(teacherId: string): Promise<Class[]> {\n    return await db.select().from(classes).where(eq(classes.teacherId, teacherId)).orderBy(desc(classes.createdAt));\n  }\n\n  async getAllClasses(): Promise<Class[]> {\n    return await db.select().from(classes).orderBy(desc(classes.createdAt));\n  }\n\n  async createClass(classData: InsertClass): Promise<Class> {\n    const [newClass] = await db.insert(classes).values(classData).returning();\n    return newClass;\n  }\n\n  async updateClass(id: string, updates: Partial<InsertClass>): Promise<Class | undefined> {\n    const [updatedClass] = await db.update(classes)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(classes.id, id))\n      .returning();\n    return updatedClass;\n  }\n\n  async deleteClass(id: string): Promise<boolean> {\n    const result = await db.delete(classes).where(eq(classes.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async enrollStudent(enrollment: InsertEnrollment): Promise<Enrollment> {\n    const [newEnrollment] = await db.insert(enrollments).values(enrollment).returning();\n    return newEnrollment;\n  }\n\n  async getEnrollmentsByStudent(studentId: string): Promise<Enrollment[]> {\n    return await db.select().from(enrollments).where(eq(enrollments.studentId, studentId));\n  }\n\n  async getEnrollmentsByClass(classId: string): Promise<Enrollment[]> {\n    return await db.select().from(enrollments).where(eq(enrollments.classId, classId));\n  }\n\n  async checkEnrollment(studentId: string, classId: string): Promise<Enrollment | undefined> {\n    const [enrollment] = await db.select().from(enrollments)\n      .where(and(eq(enrollments.studentId, studentId), eq(enrollments.classId, classId)));\n    return enrollment;\n  }\n\n  async getContentByClass(classId: string): Promise<Content[]> {\n    return await db.select().from(content).where(eq(content.classId, classId)).orderBy(desc(content.createdAt));\n  }\n\n  async createContent(contentData: InsertContent): Promise<Content> {\n    const [newContent] = await db.insert(content).values(contentData).returning();\n    return newContent;\n  }\n\n  async getMessagesByClass(classId: string): Promise<Message[]> {\n    return await db.select().from(messages).where(eq(messages.classId, classId)).orderBy(desc(messages.timestamp));\n  }\n\n  async createMessage(messageData: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(messageData).returning();\n    return newMessage;\n  }\n\n  async createRating(ratingData: InsertRating): Promise<Rating> {\n    const [newRating] = await db.insert(ratings).values(ratingData).returning();\n    return newRating;\n  }\n\n  async getRatingsByTeacher(teacherId: string): Promise<Rating[]> {\n    return await db.select().from(ratings).where(eq(ratings.teacherId, teacherId)).orderBy(desc(ratings.createdAt));\n  }\n\n  async getAverageRating(teacherId: string): Promise<number> {\n    const [result] = await db.select({ avg: avg(ratings.rating) })\n      .from(ratings)\n      .where(eq(ratings.teacherId, teacherId));\n    return Number(result.avg) || 0;\n  }\n\n  async getUserStats(): Promise<{ totalUsers: number; totalStudents: number; totalTeachers: number }> {\n    const [totalUsers] = await db.select({ count: count() }).from(users);\n    const [totalStudents] = await db.select({ count: count() }).from(users).where(eq(users.role, 'student'));\n    const [totalTeachers] = await db.select({ count: count() }).from(users).where(eq(users.role, 'teacher'));\n    \n    return {\n      totalUsers: totalUsers.count,\n      totalStudents: totalStudents.count,\n      totalTeachers: totalTeachers.count\n    };\n  }\n\n  async getClassStats(): Promise<{ totalClasses: number; liveClasses: number }> {\n    const [totalClasses] = await db.select({ count: count() }).from(classes);\n    const [liveClasses] = await db.select({ count: count() }).from(classes).where(eq(classes.isLive, true));\n    \n    return {\n      totalClasses: totalClasses.count,\n      liveClasses: liveClasses.count\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7074},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { storage } from './storage';\n\ninterface ExtendedWebSocket extends WebSocket {\n  userId?: string;\n  classId?: string;\n}\n\nexport function setupWebSocket(server: Server) {\n  const wss = new WebSocketServer({ \n    server, \n    path: '/ws'\n  });\n\n  wss.on('connection', (ws: ExtendedWebSocket, request) => {\n    console.log('WebSocket connection established');\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        switch (message.type) {\n          case 'join_class':\n            ws.userId = message.userId;\n            ws.classId = message.classId;\n            break;\n            \n          case 'chat_message':\n            if (ws.userId && ws.classId) {\n              // Save message to database\n              await storage.createMessage({\n                classId: ws.classId,\n                senderId: ws.userId,\n                message: message.content\n              });\n              \n              // Broadcast to all clients in the same class\n              wss.clients.forEach((client: ExtendedWebSocket) => {\n                if (client !== ws && \n                    client.readyState === WebSocket.OPEN && \n                    client.classId === ws.classId) {\n                  client.send(JSON.stringify({\n                    type: 'chat_message',\n                    userId: ws.userId,\n                    content: message.content,\n                    timestamp: new Date().toISOString()\n                  }));\n                }\n              });\n            }\n            break;\n            \n          case 'raise_hand':\n            if (ws.userId && ws.classId) {\n              // Broadcast hand raise to teacher and other students\n              wss.clients.forEach((client: ExtendedWebSocket) => {\n                if (client !== ws && \n                    client.readyState === WebSocket.OPEN && \n                    client.classId === ws.classId) {\n                  client.send(JSON.stringify({\n                    type: 'hand_raised',\n                    userId: ws.userId,\n                    timestamp: new Date().toISOString()\n                  }));\n                }\n              });\n            }\n            break;\n            \n          case 'accept_hand':\n            // Teacher accepting a student's raised hand\n            if (ws.userId && ws.classId) {\n              wss.clients.forEach((client: ExtendedWebSocket) => {\n                if (client.readyState === WebSocket.OPEN && \n                    client.classId === ws.classId &&\n                    client.userId === message.studentId) {\n                  client.send(JSON.stringify({\n                    type: 'hand_accepted',\n                    teacherId: ws.userId,\n                    timestamp: new Date().toISOString()\n                  }));\n                }\n              });\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  return wss;\n}\n","size_bytes":3169},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  role: varchar(\"role\").notNull().default(\"student\"), // student, teacher, admin\n  avatar: varchar(\"avatar\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classes table\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  subject: varchar(\"subject\").notNull(),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => users.id),\n  date: timestamp(\"date\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  maxStudents: integer(\"max_students\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  isLive: boolean(\"is_live\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Enrollments table\nexport const enrollments = pgTable(\"enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  completed: boolean(\"completed\").default(false),\n});\n\n// Content table\nexport const content = pgTable(\"content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  title: varchar(\"title\").notNull(),\n  type: varchar(\"type\").notNull(), // video, pdf, slide, note\n  fileUrl: varchar(\"file_url\"),\n  content: text(\"content\"), // for text notes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messages table (for chat)\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  message: text(\"message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Ratings table\nexport const ratings = pgTable(\"ratings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => users.id),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => users.id),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  taughtClasses: many(classes),\n  enrollments: many(enrollments),\n  messages: many(messages),\n  givenRatings: many(ratings, { relationName: \"studentRatings\" }),\n  receivedRatings: many(ratings, { relationName: \"teacherRatings\" }),\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  teacher: one(users, {\n    fields: [classes.teacherId],\n    references: [users.id],\n  }),\n  enrollments: many(enrollments),\n  content: many(content),\n  messages: many(messages),\n  ratings: many(ratings),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  student: one(users, {\n    fields: [enrollments.studentId],\n    references: [users.id],\n  }),\n  class: one(classes, {\n    fields: [enrollments.classId],\n    references: [classes.id],\n  }),\n}));\n\nexport const contentRelations = relations(content, ({ one }) => ({\n  class: one(classes, {\n    fields: [content.classId],\n    references: [classes.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  class: one(classes, {\n    fields: [messages.classId],\n    references: [classes.id],\n  }),\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n  }),\n}));\n\nexport const ratingsRelations = relations(ratings, ({ one }) => ({\n  student: one(users, {\n    fields: [ratings.studentId],\n    references: [users.id],\n    relationName: \"studentRatings\",\n  }),\n  teacher: one(users, {\n    fields: [ratings.teacherId],\n    references: [users.id],\n    relationName: \"teacherRatings\",\n  }),\n  class: one(classes, {\n    fields: [ratings.classId],\n    references: [classes.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertContentSchema = createInsertSchema(content).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertRatingSchema = createInsertSchema(ratings).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Class = typeof classes.$inferSelect;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertEnrollment = z.infer<typeof insertEnrollmentSchema>;\nexport type Content = typeof content.$inferSelect;\nexport type InsertContent = z.infer<typeof insertContentSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Rating = typeof ratings.$inferSelect;\nexport type InsertRating = z.infer<typeof insertRatingSchema>;\n","size_bytes":6224},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport { Navbar } from \"@/components/navbar\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport StudentDashboard from \"@/pages/student-dashboard\";\nimport { StudentBrowse } from \"@/pages/student-browse\";\nimport { StudentEnrolled } from \"@/pages/student-enrolled\";\nimport { StudentLibrary } from \"@/pages/student-library\";\nimport { StudentProgress } from \"@/pages/student-progress\";\nimport { StudentLive } from \"@/pages/student-live\";\nimport TeacherDashboard from \"@/pages/teacher-dashboard\";\nimport { TeacherClasses } from \"@/pages/teacher-classes\";\nimport { TeacherContent } from \"@/pages/teacher-content\";\nimport { TeacherStudents } from \"@/pages/teacher-students\";\nimport { TeacherAnalytics } from \"@/pages/teacher-analytics\";\nimport CreateClass from \"@/pages/create-class\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport { AdminUsers } from \"@/pages/admin-users\";\nimport { AdminClasses } from \"@/pages/admin-classes\";\nimport { AdminPayments } from \"@/pages/admin-payments\";\nimport { AdminReports } from \"@/pages/admin-reports\";\nimport LiveClass from \"@/pages/live-class\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      {/* Student Routes */}\n      <ProtectedRoute path=\"/student/browse\" component={StudentBrowse} requiredRole=\"student\" />\n      <ProtectedRoute path=\"/student/enrolled\" component={StudentEnrolled} requiredRole=\"student\" />\n      <ProtectedRoute path=\"/student/library\" component={StudentLibrary} requiredRole=\"student\" />\n      <ProtectedRoute path=\"/student/progress\" component={StudentProgress} requiredRole=\"student\" />\n      <ProtectedRoute path=\"/student/live\" component={StudentLive} requiredRole=\"student\" />\n      <ProtectedRoute path=\"/student\" component={StudentDashboard} requiredRole=\"student\" />\n      \n      {/* Teacher Routes */}\n      <ProtectedRoute path=\"/teacher/classes\" component={TeacherClasses} requiredRole=\"teacher\" />\n      <ProtectedRoute path=\"/teacher/content\" component={TeacherContent} requiredRole=\"teacher\" />\n      <ProtectedRoute path=\"/teacher/students\" component={TeacherStudents} requiredRole=\"teacher\" />\n      <ProtectedRoute path=\"/teacher/analytics\" component={TeacherAnalytics} requiredRole=\"teacher\" />\n      <ProtectedRoute path=\"/teacher/create\" component={CreateClass} requiredRole=\"teacher\" />\n      <ProtectedRoute path=\"/teacher\" component={TeacherDashboard} requiredRole=\"teacher\" />\n      \n      {/* Admin Routes */}\n      <ProtectedRoute path=\"/admin/users\" component={AdminUsers} requiredRole=\"admin\" />\n      <ProtectedRoute path=\"/admin/classes\" component={AdminClasses} requiredRole=\"admin\" />\n      <ProtectedRoute path=\"/admin/payments\" component={AdminPayments} requiredRole=\"admin\" />\n      <ProtectedRoute path=\"/admin/reports\" component={AdminReports} requiredRole=\"admin\" />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} requiredRole=\"admin\" />\n      \n      {/* Live Class Route */}\n      <ProtectedRoute path=\"/live/:classId\" component={LiveClass} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Navbar />\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3878},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(262, 83%, 58%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 32%, 27%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 32%, 27%);\n  --input: hsl(215, 32%, 27%);\n  --ring: hsl(217, 91%, 60%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: ui-serif, Georgia, serif;\n  --font-mono: ui-monospace, SFMono-Regular, monospace;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(262, 83%, 58%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 32%, 27%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 32%, 27%);\n  --input: hsl(215, 32%, 27%);\n  --ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer utilities {\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .glass-strong {\n    background: rgba(255, 255, 255, 0.15);\n    backdrop-filter: blur(15px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n  }\n\n  .hover-lift {\n    transition: all 0.3s ease;\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n  }\n}\n","size_bytes":2344},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  BarChart3, \n  Users, \n  BookOpen, \n  CreditCard, \n  Flag \n} from \"lucide-react\";\n\nconst sidebarItems = [\n  { href: \"/admin\", icon: BarChart3, label: \"Overview\" },\n  { href: \"/admin/users\", icon: Users, label: \"Users\" },\n  { href: \"/admin/classes\", icon: BookOpen, label: \"Classes\" },\n  { href: \"/admin/payments\", icon: CreditCard, label: \"Payments\" },\n  { href: \"/admin/reports\", icon: Flag, label: \"Reports\" },\n];\n\nexport function AdminSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"fixed left-0 top-16 bottom-0 w-64 bg-card/60 backdrop-blur-lg border-r border-border p-6\">\n      <div className=\"space-y-2\">\n        {sidebarItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <div\n                className={cn(\n                  \"w-full flex items-center p-3 rounded-lg transition-colors\",\n                  \"hover:bg-white/10\",\n                  isActive && \"bg-primary/10 text-primary\"\n                )}\n              >\n                <Icon className=\"w-5 h-5 mr-3\" />\n                {item.label}\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1375},"client/src/components/enrollment-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, CreditCard } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EnrollmentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  classData: {\n    id: string;\n    title: string;\n    price: string;\n    teacher: string;\n    rating?: number;\n  } | null;\n}\n\nexport function EnrollmentModal({ isOpen, onClose, classData }: EnrollmentModalProps) {\n  const [cardNumber, setCardNumber] = useState(\"\");\n  const [expiry, setExpiry] = useState(\"\");\n  const [cvc, setCvc] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      if (!classData) throw new Error(\"No class data\");\n      \n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const res = await apiRequest(\"POST\", `/api/classes/${classData.id}/enroll`);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Enrollment Successful!\",\n        description: \"You have been enrolled in the class and payment was processed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/enrollments\"] });\n      onClose();\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Enrollment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setCardNumber(\"\");\n    setExpiry(\"\");\n    setCvc(\"\");\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    enrollMutation.mutate();\n  };\n\n  if (!classData) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"glass-strong max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-2xl font-bold mb-2\">\n            Enroll in Class\n          </DialogTitle>\n          <p className=\"text-center text-muted-foreground\">\n            Complete your enrollment and payment\n          </p>\n        </DialogHeader>\n\n        {/* Class Details */}\n        <Card className=\"glass mb-6\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-2\">{classData.title}</h3>\n            <p className=\"text-sm text-muted-foreground mb-3\">by {classData.teacher}</p>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-lg font-bold text-green-400\">${classData.price}</span>\n              {classData.rating && (\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-yellow-400 mr-1 fill-current\" />\n                  <span className=\"text-sm\">{classData.rating}</span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"cardNumber\">Card Number</Label>\n            <Input\n              id=\"cardNumber\"\n              type=\"text\"\n              placeholder=\"4242 4242 4242 4242\"\n              value={cardNumber}\n              onChange={(e) => setCardNumber(e.target.value)}\n              className=\"glass\"\n              required\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"expiry\">Expiry</Label>\n              <Input\n                id=\"expiry\"\n                type=\"text\"\n                placeholder=\"MM/YY\"\n                value={expiry}\n                onChange={(e) => setExpiry(e.target.value)}\n                className=\"glass\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"cvc\">CVC</Label>\n              <Input\n                id=\"cvc\"\n                type=\"text\"\n                placeholder=\"123\"\n                value={cvc}\n                onChange={(e) => setCvc(e.target.value)}\n                className=\"glass\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"flex space-x-4 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              className=\"flex-1 glass\" \n              onClick={onClose}\n              disabled={enrollMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-600\"\n              disabled={enrollMutation.isPending}\n            >\n              <CreditCard className=\"w-4 h-4 mr-2\" />\n              {enrollMutation.isPending ? \"Processing...\" : \"Pay & Enroll\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5278},"client/src/components/navbar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Link } from \"wouter\";\nimport { GraduationCap, Bell, LogOut } from \"lucide-react\";\n\nexport function Navbar() {\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-lg border-b border-border\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <GraduationCap className=\"text-white text-lg\" />\n            </div>\n            <span className=\"text-xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent\">\n              EduStream\n            </span>\n          </Link>\n          \n          {user && (\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <Link href=\"/\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                Home\n              </Link>\n              {user.role === 'student' && (\n                <Link href=\"/student\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Dashboard\n                </Link>\n              )}\n              {user.role === 'teacher' && (\n                <Link href=\"/teacher\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Dashboard\n                </Link>\n              )}\n              {user.role === 'admin' && (\n                <Link href=\"/admin\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Admin\n                </Link>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <>\n                <Button variant=\"ghost\" size=\"sm\" className=\"glass\">\n                  <Bell className=\"w-4 h-4 mr-2\" />\n                  Notifications\n                </Button>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Avatar className=\"cursor-pointer\">\n                      <AvatarFallback className=\"bg-gradient-to-r from-green-400 to-blue-500\">\n                        {user.firstName[0]}{user.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"glass\">\n                    <DropdownMenuItem onClick={handleLogout}>\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Logout\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <Link href=\"/auth\">\n                <Button>Login</Button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3387},"client/src/components/student-sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Search, \n  Book, \n  Folder, \n  TrendingUp, \n  Video \n} from \"lucide-react\";\n\nconst sidebarItems = [\n  { href: \"/student\", icon: Home, label: \"Dashboard\" },\n  { href: \"/student/browse\", icon: Search, label: \"Browse Classes\" },\n  { href: \"/student/enrolled\", icon: Book, label: \"My Classes\" },\n  { href: \"/student/library\", icon: Folder, label: \"Content Library\" },\n  { href: \"/student/progress\", icon: TrendingUp, label: \"Progress\" },\n  { href: \"/student/live\", icon: Video, label: \"Live Class\" },\n];\n\nexport function StudentSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"fixed left-0 top-16 bottom-0 w-64 bg-card/60 backdrop-blur-lg border-r border-border p-6\">\n      <div className=\"space-y-2\">\n        {sidebarItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <div\n                className={cn(\n                  \"w-full flex items-center p-3 rounded-lg transition-colors\",\n                  \"hover:bg-white/10\",\n                  isActive && \"bg-primary/10 text-primary\"\n                )}\n              >\n                <Icon className=\"w-5 h-5 mr-3\" />\n                {item.label}\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1471},"client/src/components/teacher-sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  BookOpen, \n  Plus, \n  FolderOpen, \n  Users, \n  BarChart3 \n} from \"lucide-react\";\n\nconst sidebarItems = [\n  { href: \"/teacher\", icon: Home, label: \"Dashboard\" },\n  { href: \"/teacher/classes\", icon: BookOpen, label: \"My Classes\" },\n  { href: \"/teacher/create\", icon: Plus, label: \"Create Class\" },\n  { href: \"/teacher/content\", icon: FolderOpen, label: \"Content Library\" },\n  { href: \"/teacher/students\", icon: Users, label: \"Students\" },\n  { href: \"/teacher/analytics\", icon: BarChart3, label: \"Analytics\" },\n];\n\nexport function TeacherSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"fixed left-0 top-16 bottom-0 w-64 bg-card/60 backdrop-blur-lg border-r border-border p-6\">\n      <div className=\"space-y-2\">\n        {sidebarItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <div\n                className={cn(\n                  \"w-full flex items-center p-3 rounded-lg transition-colors\",\n                  \"hover:bg-white/10\",\n                  isActive && \"bg-primary/10 text-primary\"\n                )}\n              >\n                <Icon className=\"w-5 h-5 mr-3\" />\n                {item.label}\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1482},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<User, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<User, Error, RegisterData>;\n};\n\ntype LoginData = {\n  email: string;\n  password: string;\n};\n\ntype RegisterData = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<User | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to EduStream!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3210},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  requiredRole,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n  requiredRole?: string;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  if (requiredRole && user.role !== requiredRole) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":894},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Users, \n  BookOpen, \n  DollarSign, \n  AlertTriangle,\n  UserPlus,\n  Flag,\n  TrendingUp,\n  Settings\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  \n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  return (\n    <div className=\"flex min-h-screen pt-16\">\n      <AdminSidebar />\n      \n      <div className=\"flex-1 ml-64 p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Platform overview and management tools</p>\n        </div>\n\n        {/* Platform Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center\">\n                  <Users className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">{(stats as any)?.totalUsers || 0}</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Total Users</h3>\n              <div className=\"text-xs text-green-400 mt-1\">↗ +12% this month</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center\">\n                  <BookOpen className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">{(stats as any)?.totalClasses || 0}</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Total Classes</h3>\n              <div className=\"text-xs text-green-400 mt-1\">↗ +8% this month</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center\">\n                  <DollarSign className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">$125,890</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Monthly Revenue</h3>\n              <div className=\"text-xs text-green-400 mt-1\">↗ +15% this month</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center\">\n                  <AlertTriangle className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">8</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Pending Reports</h3>\n              <div className=\"text-xs text-red-400 mt-1\">Requires attention</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n          <Card className=\"glass\">\n            <CardHeader>\n              <CardTitle>Recent User Registrations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-sm\">Alex Thompson</div>\n                    <div className=\"text-xs text-muted-foreground\">alex@example.com</div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Student</div>\n                  <div className=\"text-xs text-muted-foreground\">2 hours ago</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass\">\n            <CardHeader>\n              <CardTitle>Latest Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-3 border border-border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-semibold text-sm\">Inappropriate Content</span>\n                    <Badge variant=\"destructive\">High Priority</Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Reported by user for offensive language in class chat</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">30 minutes ago</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card className=\"glass\">\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <Link href=\"/admin/users\">\n                <Card className=\"hover:scale-105 transition-transform cursor-pointer\">\n                  <CardContent className=\"p-4 text-center\">\n                    <UserPlus className=\"w-8 h-8 text-blue-400 mb-2 mx-auto\" />\n                    <div className=\"text-sm font-semibold\">Manage Users</div>\n                  </CardContent>\n                </Card>\n              </Link>\n              \n              <Link href=\"/admin/reports\">\n                <Card className=\"hover:scale-105 transition-transform cursor-pointer\">\n                  <CardContent className=\"p-4 text-center\">\n                    <Flag className=\"w-8 h-8 text-red-400 mb-2 mx-auto\" />\n                    <div className=\"text-sm font-semibold\">Review Reports</div>\n                  </CardContent>\n                </Card>\n              </Link>\n              \n              <Link href=\"/admin/payments\">\n                <Card className=\"hover:scale-105 transition-transform cursor-pointer\">\n                  <CardContent className=\"p-4 text-center\">\n                    <TrendingUp className=\"w-8 h-8 text-green-400 mb-2 mx-auto\" />\n                    <div className=\"text-sm font-semibold\">Payment Analytics</div>\n                  </CardContent>\n                </Card>\n              </Link>\n              \n              <Card className=\"hover:scale-105 transition-transform cursor-pointer\">\n                <CardContent className=\"p-4 text-center\">\n                  <Settings className=\"w-8 h-8 text-purple-400 mb-2 mx-auto\" />\n                  <div className=\"text-sm font-semibold\">System Settings</div>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7679},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { GraduationCap, University, Presentation } from \"lucide-react\";\nimport { Redirect } from \"wouter\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [isLogin, setIsLogin] = useState(true);\n  const [role, setRole] = useState(\"student\");\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    switch (user.role) {\n      case 'student':\n        return <Redirect to=\"/student\" />;\n      case 'teacher':\n        return <Redirect to=\"/teacher\" />;\n      case 'admin':\n        return <Redirect to=\"/admin\" />;\n      default:\n        return <Redirect to=\"/\" />;\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (isLogin) {\n      loginMutation.mutate({\n        email: formData.email,\n        password: formData.password,\n      });\n    } else {\n      registerMutation.mutate({\n        ...formData,\n        role,\n      });\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 pt-20\">\n      <Card className=\"glass-strong w-full max-w-md hover:scale-105 transition-transform\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <GraduationCap className=\"text-white text-2xl\" />\n            </div>\n            <h2 className=\"text-2xl font-bold mb-2\">Welcome to EduStream</h2>\n            <p className=\"text-muted-foreground\">\n              {isLogin ? \"Sign in to your account\" : \"Create your account\"}\n            </p>\n          </div>\n\n          {!isLogin && (\n            <div className=\"space-y-4 mb-8\">\n              <Label>Choose your role</Label>\n              <RadioGroup value={role} onValueChange={setRole}>\n                <div className=\"flex items-center space-x-2 p-4 glass rounded-xl\">\n                  <RadioGroupItem value=\"student\" id=\"student\" />\n                  <label htmlFor=\"student\" className=\"flex items-center cursor-pointer flex-1\">\n                    <University className=\"text-blue-400 mr-3\" />\n                    <div>\n                      <div className=\"font-semibold\">Student</div>\n                      <div className=\"text-sm text-muted-foreground\">Join classes and learn</div>\n                    </div>\n                  </label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 p-4 glass rounded-xl\">\n                  <RadioGroupItem value=\"teacher\" id=\"teacher\" />\n                  <label htmlFor=\"teacher\" className=\"flex items-center cursor-pointer flex-1\">\n                    <Presentation className=\"text-purple-400 mr-3\" />\n                    <div>\n                      <div className=\"font-semibold\">Teacher</div>\n                      <div className=\"text-sm text-muted-foreground\">Create and teach classes</div>\n                    </div>\n                  </label>\n                </div>\n              </RadioGroup>\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {!isLogin && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    placeholder=\"Enter your first name\"\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    className=\"glass\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Enter your last name\"\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    className=\"glass\"\n                    required\n                  />\n                </div>\n              </div>\n            )}\n            \n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                className=\"glass\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder={isLogin ? \"Enter your password\" : \"Create a password\"}\n                value={formData.password}\n                onChange={handleInputChange}\n                className=\"glass\"\n                required\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600\"\n              disabled={loginMutation.isPending || registerMutation.isPending}\n            >\n              {isLogin ? \n                (loginMutation.isPending ? \"Signing In...\" : \"Sign In\") :\n                (registerMutation.isPending ? \"Creating Account...\" : \"Create Account\")\n              }\n            </Button>\n          </form>\n          \n          <div className=\"text-center mt-6\">\n            <span className=\"text-muted-foreground\">\n              {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\n            </span>\n            <button \n              onClick={() => setIsLogin(!isLogin)} \n              className=\"text-blue-400 hover:text-blue-300\"\n            >\n              {isLogin ? \"Sign up\" : \"Sign in\"}\n            </button>\n          </div>\n\n          {/* Demo Credentials */}\n          <Card className=\"mt-8 glass\">\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-2\">Demo Credentials:</h4>\n              <div className=\"text-sm text-muted-foreground space-y-1\">\n                <div>Student: student@demo.com / demo123</div>\n                <div>Teacher: teacher@demo.com / demo123</div>\n                <div>Admin: admin@demo.com / admin123</div>\n              </div>\n            </CardContent>\n          </Card>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7236},"client/src/pages/home-page.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Video, \n  GraduationCap, \n  TrendingUp, \n  Rocket, \n  Presentation \n} from \"lucide-react\";\n\nexport default function HomePage() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"pt-20\">\n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n        {/* Animated background elements */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-blue-500 rounded-full filter blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500 rounded-full filter blur-3xl animate-pulse delay-2000\"></div>\n        </div>\n\n        <div className=\"container mx-auto px-6 text-center relative z-10\">\n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6\">\n            Learn with the{\" \"}\n            <span className=\"bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent\">\n              Future\n            </span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-12 max-w-3xl mx-auto\">\n            Join live interactive classes, connect with expert teachers, and accelerate your learning journey with cutting-edge technology.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n            {user ? (\n              user.role === 'student' ? (\n                <Link href=\"/student\">\n                  <Button size=\"lg\" className=\"glass-strong bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n                    <Rocket className=\"w-5 h-5 mr-2\" />\n                    Go to Dashboard\n                  </Button>\n                </Link>\n              ) : user.role === 'teacher' ? (\n                <Link href=\"/teacher\">\n                  <Button size=\"lg\" className=\"glass-strong bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n                    <Presentation className=\"w-5 h-5 mr-2\" />\n                    Teacher Dashboard\n                  </Button>\n                </Link>\n              ) : (\n                <Link href=\"/admin\">\n                  <Button size=\"lg\" className=\"glass-strong bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n                    Admin Panel\n                  </Button>\n                </Link>\n              )\n            ) : (\n              <>\n                <Link href=\"/auth\">\n                  <Button size=\"lg\" className=\"glass-strong bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n                    <Rocket className=\"w-5 h-5 mr-2\" />\n                    Start Learning\n                  </Button>\n                </Link>\n                <Link href=\"/auth\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"glass\">\n                    <Presentation className=\"w-5 h-5 mr-2\" />\n                    Teach Online\n                  </Button>\n                </Link>\n              </>\n            )}\n          </div>\n\n          {/* Feature cards */}\n          <div className=\"grid md:grid-cols-3 gap-8 mt-20\">\n            <Card className=\"glass hover:scale-105 transition-transform\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <Video className=\"text-white text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-4\">Live Interactive Classes</h3>\n                <p className=\"text-muted-foreground\">Join real-time classes with video, chat, and interactive features. Raise your hand and get personalized attention.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass hover:scale-105 transition-transform\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <GraduationCap className=\"text-white text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-4\">Expert Teachers</h3>\n                <p className=\"text-muted-foreground\">Learn from verified professionals with ratings, reviews, and proven track records in their subjects.</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass hover:scale-105 transition-transform\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                  <TrendingUp className=\"text-white text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-4\">Progress Tracking</h3>\n                <p className=\"text-muted-foreground\">Monitor your learning journey with detailed analytics, streaks, and achievement badges.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-20 relative\">\n        <div className=\"container mx-auto px-6\">\n          <Card className=\"glass p-12\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">Trusted by learners worldwide</h2>\n            <div className=\"grid md:grid-cols-4 gap-8 text-center\">\n              <div>\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent mb-2\">50K+</div>\n                <div className=\"text-muted-foreground\">Active Students</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent mb-2\">2K+</div>\n                <div className=\"text-muted-foreground\">Expert Teachers</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent mb-2\">100K+</div>\n                <div className=\"text-muted-foreground\">Classes Completed</div>\n              </div>\n              <div>\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent mb-2\">4.9★</div>\n                <div className=\"text-muted-foreground\">Average Rating</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":6786},"client/src/pages/live-class.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Mic, \n  MicOff, \n  Video, \n  VideoOff, \n  Hand, \n  Share, \n  LogOut,\n  Send,\n  Crown\n} from \"lucide-react\";\n\nexport default function LiveClass() {\n  const { user } = useAuth();\n  const [isAudioMuted, setIsAudioMuted] = useState(true);\n  const [isVideoOff, setIsVideoOff] = useState(true);\n  const [handRaised, setHandRaised] = useState(false);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([\n    { id: 1, sender: \"Teacher\", message: \"Welcome to the Advanced React Patterns class!\", isTeacher: true },\n    { id: 2, sender: \"Alex Chen\", message: \"Great explanation! Thanks for the demo.\", isTeacher: false },\n    { id: 3, sender: \"Sarah Kim\", message: \"Could you show the useCallback example again?\", isTeacher: false },\n  ]);\n\n  const participants = [\n    { id: 1, name: \"John Smith\", role: \"Teacher\", isTeacher: true },\n    { id: 2, name: \"Alex Chen\", role: \"Student\", isTeacher: false, handRaised: true },\n    { id: 3, name: \"Sarah Kim\", role: \"Student\", isTeacher: false },\n    { id: 4, name: \"Mike Johnson\", role: \"Student\", isTeacher: false },\n  ];\n\n  useEffect(() => {\n    // WebSocket connection for live chat would be implemented here\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    // const socket = new WebSocket(wsUrl);\n    // socket.onopen = () => {\n    //   socket.send(JSON.stringify({\n    //     type: 'join_class',\n    //     userId: user?.id,\n    //     classId: 'current-class-id'\n    //   }));\n    // };\n    \n    return () => {\n      // socket.close();\n    };\n  }, [user]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (chatMessage.trim()) {\n      setChatMessages(prev => [...prev, {\n        id: Date.now(),\n        sender: user?.firstName + \" \" + user?.lastName || \"You\",\n        message: chatMessage,\n        isTeacher: user?.role === 'teacher'\n      }]);\n      setChatMessage(\"\");\n    }\n  };\n\n  const toggleRaiseHand = () => {\n    setHandRaised(!handRaised);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Live Class: Advanced React Patterns</h1>\n        <p className=\"text-muted-foreground\">with John Smith • 45 students online</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-4 gap-6\">\n        {/* Video Area */}\n        <div className=\"lg:col-span-3\">\n          <Card className=\"glass overflow-hidden mb-6\">\n            <div className=\"aspect-video bg-black relative flex items-center justify-center\">\n              {/* Teacher video stream placeholder */}\n              <div className=\"w-full h-full bg-gradient-to-br from-blue-900 to-purple-900 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"w-24 h-24 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <span className=\"text-white text-2xl font-bold\">JS</span>\n                  </div>\n                  <h3 className=\"text-white text-xl font-semibold\">John Smith</h3>\n                  <p className=\"text-blue-200\">Teaching Advanced React Patterns</p>\n                </div>\n              </div>\n              \n              <div className=\"absolute bottom-4 left-4 flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant={isAudioMuted ? \"destructive\" : \"secondary\"}\n                  onClick={() => setIsAudioMuted(!isAudioMuted)}\n                >\n                  {isAudioMuted ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={isVideoOff ? \"destructive\" : \"secondary\"}\n                  onClick={() => setIsVideoOff(!isVideoOff)}\n                >\n                  {isVideoOff ? <VideoOff className=\"w-4 h-4\" /> : <Video className=\"w-4 h-4\" />}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={handRaised ? \"default\" : \"outline\"}\n                  onClick={toggleRaiseHand}\n                  className={handRaised ? \"bg-blue-500\" : \"\"}\n                >\n                  <Hand className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"absolute bottom-4 right-4\">\n                <Badge variant=\"destructive\" className=\"animate-pulse\">\n                  <div className=\"w-2 h-2 bg-white rounded-full mr-2\"></div>\n                  LIVE\n                </Badge>\n              </div>\n            </div>\n          </Card>\n\n          {/* Class Controls */}\n          <Card className=\"glass\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                    <Hand className=\"w-4 h-4 mr-2\" />\n                    {handRaised ? \"Lower Hand\" : \"Raise Hand\"}\n                  </Button>\n                  <Button variant=\"outline\" className=\"glass\">\n                    <Share className=\"w-4 h-4 mr-2\" />\n                    Share Screen\n                  </Button>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">Duration: 45:30</span>\n                  <Button variant=\"destructive\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Leave Class\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Chat and Participants */}\n        <div className=\"space-y-6\">\n          {/* Chat */}\n          <Card className=\"glass h-96\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Class Chat</CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"p-0\">\n              <div className=\"px-4 h-64 overflow-y-auto space-y-3\">\n                {chatMessages.map((message) => (\n                  <div key={message.id} className=\"text-sm\">\n                    <div className={`font-semibold ${message.isTeacher ? 'text-purple-400' : 'text-blue-400'}`}>\n                      {message.sender}\n                      {message.isTeacher && <Crown className=\"w-3 h-3 inline ml-1 text-yellow-400\" />}\n                    </div>\n                    <div className=\"text-muted-foreground\">{message.message}</div>\n                  </div>\n                ))}\n              </div>\n\n              <form onSubmit={handleSendMessage} className=\"p-4 border-t border-border\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Type a message...\"\n                    value={chatMessage}\n                    onChange={(e) => setChatMessage(e.target.value)}\n                    className=\"flex-1 glass text-sm\"\n                  />\n                  <Button type=\"submit\" size=\"sm\" className=\"bg-blue-500 hover:bg-blue-600\">\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Participants */}\n          <Card className=\"glass\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Participants ({participants.length})</CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"p-4 max-h-64 overflow-y-auto space-y-2\">\n              {participants.map((participant) => (\n                <div key={participant.id} className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs font-bold\">\n                      {participant.name.split(' ').map(n => n[0]).join('')}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium\">{participant.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">{participant.role}</div>\n                  </div>\n                  {participant.isTeacher && <Crown className=\"w-4 h-4 text-yellow-400\" />}\n                  {participant.handRaised && <Hand className=\"w-4 h-4 text-blue-400\" />}\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9085},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/student-dashboard.tsx":{"content":"import { StudentSidebar } from \"@/components/student-sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Book, CheckCircle, Flame, Clock, Play, Download } from \"lucide-react\";\n\nexport default function StudentDashboard() {\n  const { user } = useAuth();\n  \n  const { data: enrollments } = useQuery({\n    queryKey: [\"/api/enrollments\"],\n  });\n\n  const { data: classes } = useQuery({\n    queryKey: [\"/api/classes\"],\n  });\n\n  return (\n    <div className=\"flex min-h-screen pt-16\">\n      <StudentSidebar />\n      \n      <div className=\"flex-1 ml-64 p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">\n            Welcome back, <span className=\"bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent\">\n              {user?.firstName}\n            </span>! 👋\n          </h1>\n          <p className=\"text-muted-foreground\">Continue your learning journey and explore new classes.</p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center\">\n                  <Book className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">{Array.isArray(enrollments) ? enrollments.length : 0}</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Enrolled Classes</h3>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center\">\n                  <CheckCircle className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">8</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Completed Lessons</h3>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center\">\n                  <Flame className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">15</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Day Streak</h3>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center\">\n                  <Clock className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">45</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Hours Learned</h3>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Classes */}\n        <Card className=\"glass mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Classes</CardTitle>\n              <Button variant=\"ghost\" className=\"text-blue-400 hover:text-blue-300\">\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center p-4 glass rounded-xl hover:scale-105 transition-transform\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center mr-4\">\n                  <Book className=\"text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">Advanced React Patterns</h3>\n                  <p className=\"text-sm text-muted-foreground\">by John Smith</p>\n                  <div className=\"flex items-center mt-2\">\n                    <Badge className=\"bg-blue-500\">Live Tomorrow</Badge>\n                    <span className=\"text-xs text-muted-foreground ml-2\">3:00 PM - 4:30 PM</span>\n                  </div>\n                </div>\n                <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Join\n                </Button>\n              </div>\n\n              <div className=\"flex items-center p-4 glass rounded-xl hover:scale-105 transition-transform\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center mr-4\">\n                  <CheckCircle className=\"text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">Python for Data Science</h3>\n                  <p className=\"text-sm text-muted-foreground\">by Sarah Johnson</p>\n                  <div className=\"flex items-center mt-2\">\n                    <Badge variant=\"secondary\">Completed</Badge>\n                    <span className=\"text-xs text-muted-foreground ml-2\">Yesterday</span>\n                  </div>\n                </div>\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Resources\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Schedule */}\n        <Card className=\"glass\">\n          <CardHeader>\n            <CardTitle>Today's Schedule</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center p-4 border border-border rounded-xl\">\n                <div className=\"text-center mr-4\">\n                  <div className=\"text-lg font-bold\">3:00</div>\n                  <div className=\"text-sm text-muted-foreground\">PM</div>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">Machine Learning Fundamentals</h3>\n                  <p className=\"text-sm text-muted-foreground\">with Dr. Michael Chen</p>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button size=\"sm\" className=\"bg-blue-500 hover:bg-blue-600\">\n                    Join\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\">\n                    🔔\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7327},"client/src/pages/teacher-dashboard.tsx":{"content":"import { TeacherSidebar } from \"@/components/teacher-sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  BookOpen, \n  Users, \n  DollarSign, \n  Star, \n  Plus, \n  Upload, \n  TrendingUp, \n  Video,\n  Settings\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function TeacherDashboard() {\n  const { user } = useAuth();\n  \n  const { data: classes } = useQuery({\n    queryKey: [\"/api/teacher/classes\"],\n  });\n\n  return (\n    <div className=\"flex min-h-screen pt-16\">\n      <TeacherSidebar />\n      \n      <div className=\"flex-1 ml-64 p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Teacher Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage your classes and track your teaching performance</p>\n        </div>\n\n        {/* Teacher Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center\">\n                  <BookOpen className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">{Array.isArray(classes) ? classes.length : 0}</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Total Classes</h3>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center\">\n                  <Users className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">340</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Total Students</h3>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center\">\n                  <DollarSign className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">$2,850</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Monthly Earnings</h3>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass hover:scale-105 transition-transform\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-yellow-500 rounded-xl flex items-center justify-center\">\n                  <Star className=\"text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">4.8</span>\n              </div>\n              <h3 className=\"font-semibold text-sm text-muted-foreground\">Average Rating</h3>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <Link href=\"/teacher/create\">\n            <Card className=\"glass hover:scale-105 transition-transform cursor-pointer\">\n              <CardContent className=\"p-6 text-left\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center mb-4\">\n                  <Plus className=\"text-white text-xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Create New Class</h3>\n                <p className=\"text-sm text-muted-foreground\">Schedule a new live class or upload course content</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/teacher/content\">\n            <Card className=\"glass hover:scale-105 transition-transform cursor-pointer\">\n              <CardContent className=\"p-6 text-left\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center mb-4\">\n                  <Upload className=\"text-white text-xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Upload Content</h3>\n                <p className=\"text-sm text-muted-foreground\">Add notes, videos, and course materials</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/teacher/analytics\">\n            <Card className=\"glass hover:scale-105 transition-transform cursor-pointer\">\n              <CardContent className=\"p-6 text-left\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center mb-4\">\n                  <TrendingUp className=\"text-white text-xl\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">View Analytics</h3>\n                <p className=\"text-sm text-muted-foreground\">Track student engagement and performance</p>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Upcoming Classes */}\n        <Card className=\"glass mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Upcoming Classes</CardTitle>\n              <Link href=\"/teacher/classes\">\n                <Button variant=\"ghost\" className=\"text-blue-400 hover:text-blue-300\">\n                  View All\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center p-4 glass rounded-xl hover:scale-105 transition-transform\">\n                <div className=\"text-center mr-4\">\n                  <div className=\"text-lg font-bold\">3:00</div>\n                  <div className=\"text-sm text-muted-foreground\">PM</div>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">Advanced React Patterns</h3>\n                  <p className=\"text-sm text-muted-foreground\">25 students enrolled</p>\n                  <div className=\"flex items-center mt-2\">\n                    <Badge className=\"bg-blue-500\">Live in 2 hours</Badge>\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                    <Video className=\"w-4 h-4 mr-2\" />\n                    Start Class\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Settings className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Student Activity */}\n        <Card className=\"glass\">\n          <CardHeader>\n            <CardTitle>Recent Student Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center p-3 border border-border rounded-lg\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mr-3\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">\n                    <span className=\"font-semibold\">Sarah Johnson</span>\n                    <span className=\"text-muted-foreground\"> completed Python Basics</span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                </div>\n                <div className=\"flex items-center\">\n                  <Star className=\"w-4 h-4 text-yellow-400 mr-1 fill-current\" />\n                  <span className=\"text-sm\">5.0</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8432},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nEduStream is a comprehensive online education platform that enables live interactive learning between teachers and students. The application features real-time video classes with chat functionality, content management, enrollment systems, and payment processing. Teachers can create and manage live classes, upload educational content, and track student progress, while students can browse, enroll in, and participate in live classes with interactive features like raising hands and one-on-one video calls.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with **React** using **TypeScript** and **Vite** as the build tool. The UI is styled with **Tailwind CSS** and uses **shadcn/ui** components for consistent design patterns. The application uses **Wouter** for client-side routing and **TanStack Query** for server state management. Authentication state is managed through React Context with protected routes based on user roles (student, teacher, admin).\n\n## Backend Architecture\nThe server is built with **Express.js** and uses **Passport.js** with local strategy for authentication. Session management is handled through express-session with PostgreSQL session storage. The application follows a RESTful API design with role-based middleware for authorization. Real-time features are implemented using **WebSockets** for live chat and class interactions.\n\n## Data Storage\nThe application uses **PostgreSQL** as the primary database with **Drizzle ORM** for type-safe database operations. The database schema includes tables for users, classes, enrollments, content, messages, and ratings. **Neon Database** is used as the PostgreSQL provider for serverless deployment.\n\n## Authentication & Authorization\nAuthentication is implemented using Passport.js with local strategy and **bcrypt** for password hashing. The system supports three user roles: student, teacher, and admin. Session-based authentication is used with secure HTTP-only cookies. Protected routes enforce role-based access control on both client and server sides.\n\n## File Management\nFile uploads are handled using **Multer** middleware with configurable storage destinations and file size limits. The system supports multiple content types including videos, PDFs, slides, and notes for the content library functionality.\n\n# External Dependencies\n\n## Database & ORM\n- **@neondatabase/serverless** - Serverless PostgreSQL database connection\n- **drizzle-orm** - Type-safe database ORM with PostgreSQL dialect\n- **connect-pg-simple** - PostgreSQL session store for express-session\n\n## Payment Processing  \n- **@stripe/stripe-js** & **@stripe/react-stripe-js** - Mock payment integration for class enrollments and course purchases\n\n## Real-time Communication\n- **ws** - WebSocket implementation for live chat and class interactions\n- Built-in WebRTC placeholder for video calling functionality\n\n## UI Components & Styling\n- **@radix-ui/** components - Accessible UI primitives for all interactive elements\n- **tailwindcss** - Utility-first CSS framework\n- **class-variance-authority** & **clsx** - Dynamic class name utilities\n\n## Authentication & Security\n- **passport** & **passport-local** - Authentication middleware and strategy\n- **bcrypt** - Password hashing and validation\n- **express-session** - Session management middleware\n\n## Development Tools\n- **tsx** - TypeScript execution for development server\n- **esbuild** - Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-*** - Replit-specific development plugins for enhanced development experience","size_bytes":3655},"client/src/pages/create-class.tsx":{"content":"import { TeacherSidebar } from \"@/components/teacher-sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertClassSchema, type InsertClass } from \"@shared/schema\";\nimport { CalendarDays, Clock, Users, BookOpen, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { z } from \"zod\";\n\nconst createClassSchema = insertClassSchema.extend({\n  dateString: z.string().min(1, \"Date is required\"),\n  timeString: z.string().min(1, \"Time is required\"),\n}).omit({ teacherId: true, date: true });\n\ntype CreateClassForm = z.infer<typeof createClassSchema>;\n\nexport default function CreateClass() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const form = useForm<CreateClassForm>({\n    resolver: zodResolver(createClassSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      subject: \"\",\n      price: \"0\",\n      maxStudents: 20,\n      duration: 60,\n      dateString: \"\",\n      timeString: \"\",\n      isLive: false,\n    },\n  });\n\n  const createClassMutation = useMutation({\n    mutationFn: async (data: CreateClassForm) => {\n      const { dateString, timeString, ...classData } = data;\n      const datetime = new Date(`${dateString}T${timeString}`);\n      \n      return apiRequest(\"POST\", \"/api/classes\", {\n        ...classData,\n        date: datetime.toISOString(),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"Class created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/classes\"] });\n      setLocation(\"/teacher\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create class\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateClassForm) => {\n    createClassMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex min-h-screen pt-16\">\n      <TeacherSidebar />\n      \n      <div className=\"flex-1 ml-64 p-6\">\n        <div className=\"mb-8\">\n          <Link href=\"/teacher\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold mb-2\">Create New Class</h1>\n          <p className=\"text-muted-foreground\">Schedule a new live class for your students</p>\n        </div>\n\n        <Card className=\"glass max-w-2xl\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <BookOpen className=\"w-5 h-5 mr-2\" />\n              Class Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g., Advanced React Patterns\" \n                          {...field} \n                          data-testid=\"input-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe what students will learn in this class...\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"subject\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Subject</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-subject\">\n                              <SelectValue placeholder=\"Select subject\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"programming\">Programming</SelectItem>\n                            <SelectItem value=\"design\">Design</SelectItem>\n                            <SelectItem value=\"business\">Business</SelectItem>\n                            <SelectItem value=\"marketing\">Marketing</SelectItem>\n                            <SelectItem value=\"data-science\">Data Science</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price ($)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"text\" \n                            placeholder=\"0\" \n                            {...field}\n                            data-testid=\"input-price\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"maxStudents\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center\">\n                          <Users className=\"w-4 h-4 mr-2\" />\n                          Max Students\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"20\" \n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                            data-testid=\"input-max-students\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-2\" />\n                          Duration (minutes)\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"60\" \n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                            data-testid=\"input-duration\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"dateString\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center\">\n                          <CalendarDays className=\"w-4 h-4 mr-2\" />\n                          Date\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"date\" \n                            {...field}\n                            data-testid=\"input-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"timeString\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-2\" />\n                          Time\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"time\" \n                            {...field}\n                            data-testid=\"input-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-4 pt-4\">\n                  <Button \n                    type=\"submit\" \n                    className=\"bg-blue-500 hover:bg-blue-600\" \n                    disabled={createClassMutation.isPending}\n                    data-testid=\"button-create-class\"\n                  >\n                    {createClassMutation.isPending ? \"Creating...\" : \"Create Class\"}\n                  </Button>\n                  <Link href=\"/teacher\">\n                    <Button variant=\"outline\" data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                  </Link>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11368},"client/src/pages/admin-classes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, CalendarDays, Clock, Users, Eye, Ban, CheckCircle } from \"lucide-react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { Class, User } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface ClassWithTeacher extends Class {\n  teacher: User;\n  enrollmentCount: number;\n}\n\nexport function AdminClasses() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const { toast } = useToast();\n  \n  const { data: classes, isLoading } = useQuery<ClassWithTeacher[]>({\n    queryKey: [\"/api/admin/classes\"],\n  });\n\n  const updateClassMutation = useMutation({\n    mutationFn: async ({ classId, updates }: { classId: string; updates: Partial<Class> }) => {\n      return apiRequest(\"PATCH\", `/api/admin/classes/${classId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/classes\"] });\n      toast({\n        title: \"Success\",\n        description: \"Class updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update class\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredClasses = classes?.filter(classItem => {\n    const matchesSearch = classItem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classItem.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classItem.teacher.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classItem.teacher.lastName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = !statusFilter || \n      (statusFilter === 'live' && classItem.isLive) ||\n      (statusFilter === 'scheduled' && !classItem.isLive && new Date(classItem.date) > new Date()) ||\n      (statusFilter === 'completed' && !classItem.isLive && new Date(classItem.date) <= new Date());\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (classItem: Class) => {\n    if (classItem.isLive) {\n      return <Badge className=\"bg-red-500 hover:bg-red-600\">Live</Badge>;\n    } else if (new Date(classItem.date) > new Date()) {\n      return <Badge variant=\"secondary\">Scheduled</Badge>;\n    } else {\n      return <Badge variant=\"outline\">Completed</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <AdminSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading classes...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <AdminSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Class Management</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Monitor and manage all classes on the platform</p>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search classes or teachers...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All status</SelectItem>\n                <SelectItem value=\"live\">Live</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Total Classes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"stat-total-classes\">\n                  {classes?.length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Live Classes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-red-600\" data-testid=\"stat-live-classes\">\n                  {classes?.filter(c => c.isLive).length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Scheduled</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-blue-600\" data-testid=\"stat-scheduled-classes\">\n                  {classes?.filter(c => !c.isLive && new Date(c.date) > new Date()).length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Total Enrollments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-green-600\" data-testid=\"stat-total-enrollments\">\n                  {classes?.reduce((sum, c) => sum + c.enrollmentCount, 0) || 0}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Classes List */}\n          {!filteredClasses || filteredClasses.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-classes\">\n                  {searchQuery || statusFilter ? \"No classes found\" : \"No classes yet\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  {searchQuery || statusFilter \n                    ? \"Try adjusting your search or filters\"\n                    : \"Classes will appear here as teachers create them\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-6\">\n              {filteredClasses.map((classItem) => (\n                <Card key={classItem.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          {getStatusBadge(classItem)}\n                          <Badge variant=\"outline\" data-testid={`badge-subject-${classItem.id}`}>\n                            {classItem.subject}\n                          </Badge>\n                        </div>\n                        <CardTitle className=\"text-xl mb-2\" data-testid={`text-class-title-${classItem.id}`}>\n                          {classItem.title}\n                        </CardTitle>\n                        <CardDescription data-testid={`text-class-description-${classItem.id}`}>\n                          {classItem.description}\n                        </CardDescription>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {/* Teacher Info */}\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback data-testid={`avatar-teacher-${classItem.id}`}>\n                          {classItem.teacher.firstName[0]}{classItem.teacher.lastName[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium text-sm\" data-testid={`text-teacher-name-${classItem.id}`}>\n                          {classItem.teacher.firstName} {classItem.teacher.lastName}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\" data-testid={`text-teacher-email-${classItem.id}`}>\n                          {classItem.teacher.email}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Class Details */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <CalendarDays className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-date-${classItem.id}`}>\n                          {format(new Date(classItem.date), 'MMM dd, yyyy')}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-duration-${classItem.id}`}>\n                          {classItem.duration} mins\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-enrollment-${classItem.id}`}>\n                          {classItem.enrollmentCount}/{classItem.maxStudents} enrolled\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <span className=\"text-lg font-semibold text-green-600\" data-testid={`text-class-price-${classItem.id}`}>\n                          ${classItem.price}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${classItem.id}`}>\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        View Details\n                      </Button>\n                      {classItem.isLive && (\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-monitor-${classItem.id}`}>\n                          Monitor Live Class\n                        </Button>\n                      )}\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"ml-auto text-red-600 hover:text-red-700\" \n                        data-testid={`button-suspend-${classItem.id}`}\n                      >\n                        <Ban className=\"w-4 h-4 mr-2\" />\n                        Suspend\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":12184},"client/src/pages/admin-payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, DollarSign, CreditCard, TrendingUp, RefreshCw, Download } from \"lucide-react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { format } from \"date-fns\";\n\ninterface Payment {\n  id: string;\n  amount: number;\n  status: 'completed' | 'pending' | 'failed' | 'refunded';\n  paymentMethod: string;\n  transactionId: string;\n  createdAt: string;\n  student: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  class: {\n    id: string;\n    title: string;\n    teacher: {\n      firstName: string;\n      lastName: string;\n    };\n  };\n}\n\ninterface PaymentStats {\n  totalRevenue: number;\n  totalTransactions: number;\n  successRate: number;\n  averageOrderValue: number;\n  monthlyGrowth: number;\n}\n\nexport function AdminPayments() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [dateRange, setDateRange] = useState(\"\");\n  \n  const { data: payments, isLoading } = useQuery<Payment[]>({\n    queryKey: [\"/api/admin/payments\"],\n  });\n\n  const { data: stats } = useQuery<PaymentStats>({\n    queryKey: [\"/api/admin/payment-stats\"],\n  });\n\n  const filteredPayments = payments?.filter(payment => {\n    const matchesSearch = payment.student.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      payment.student.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      payment.student.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      payment.class.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      payment.transactionId.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = !statusFilter || payment.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'failed': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'refunded': return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const mockStats: PaymentStats = stats || {\n    totalRevenue: 0,\n    totalTransactions: 0,\n    successRate: 0,\n    averageOrderValue: 0,\n    monthlyGrowth: 0\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <AdminSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading payment data...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <AdminSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Payment Management</h1>\n                <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Monitor transactions and revenue analytics</p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" data-testid=\"button-refresh\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n                <Button variant=\"outline\" data-testid=\"button-export\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Payment Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-revenue\">\n                  ${mockStats.totalRevenue.toFixed(2)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">All time earnings</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Transactions</CardTitle>\n                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-transactions\">\n                  {mockStats.totalTransactions}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total payments</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-success-rate\">\n                  {mockStats.successRate.toFixed(1)}%\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Payment success</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Avg Order Value</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-avg-order\">\n                  ${mockStats.averageOrderValue.toFixed(2)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Per transaction</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Monthly Growth</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-monthly-growth\">\n                  {mockStats.monthlyGrowth > 0 ? '+' : ''}{mockStats.monthlyGrowth.toFixed(1)}%\n                </div>\n                <p className=\"text-xs text-muted-foreground\">vs last month</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search by student, class, or transaction ID...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All status</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"refunded\">Refunded</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={dateRange} onValueChange={setDateRange}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-date-filter\">\n                <SelectValue placeholder=\"Date range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All time</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"week\">This week</SelectItem>\n                <SelectItem value=\"month\">This month</SelectItem>\n                <SelectItem value=\"quarter\">This quarter</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Payments List */}\n          {!filteredPayments || filteredPayments.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-payments\">\n                  {searchQuery || statusFilter ? \"No payments found\" : \"No payments yet\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  {searchQuery || statusFilter \n                    ? \"Try adjusting your search or filters\"\n                    : \"Payments will appear here as students enroll in classes\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Transactions ({filteredPayments.length})</CardTitle>\n                <CardDescription>Recent payment activity and transaction details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-0 divide-y\">\n                  {filteredPayments.map((payment) => (\n                    <div key={payment.id} className=\"p-6 flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4 flex-1\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback data-testid={`avatar-student-${payment.id}`}>\n                            {payment.student.firstName[0]}{payment.student.lastName[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h3 className=\"font-semibold\" data-testid={`text-student-name-${payment.id}`}>\n                              {payment.student.firstName} {payment.student.lastName}\n                            </h3>\n                            <Badge className={getStatusColor(payment.status)} data-testid={`badge-status-${payment.id}`}>\n                              {payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-1\" data-testid={`text-class-title-${payment.id}`}>\n                            {payment.class.title}\n                          </p>\n                          <div className=\"flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400\">\n                            <span data-testid={`text-transaction-id-${payment.id}`}>\n                              ID: {payment.transactionId}\n                            </span>\n                            <span data-testid={`text-payment-method-${payment.id}`}>\n                              {payment.paymentMethod}\n                            </span>\n                            <span data-testid={`text-payment-date-${payment.id}`}>\n                              {format(new Date(payment.createdAt), 'MMM dd, yyyy HH:mm')}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <p className=\"text-xl font-bold\" data-testid={`text-payment-amount-${payment.id}`}>\n                            ${payment.amount.toFixed(2)}\n                          </p>\n                          <p className=\"text-sm text-gray-500 dark:text-gray-400\" data-testid={`text-teacher-name-${payment.id}`}>\n                            to {payment.class.teacher.firstName} {payment.class.teacher.lastName}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13489},"client/src/pages/admin-reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart3, TrendingUp, Users, BookOpen, DollarSign, Calendar, Download, RefreshCw } from \"lucide-react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { useState } from \"react\";\n\ninterface PlatformReports {\n  overview: {\n    totalUsers: number;\n    totalClasses: number;\n    totalRevenue: number;\n    activeTeachers: number;\n    completionRate: number;\n    userGrowth: number;\n    revenueGrowth: number;\n  };\n  userEngagement: {\n    dailyActiveUsers: number;\n    averageSessionDuration: number;\n    classCompletionRate: number;\n    repeatEnrollmentRate: number;\n  };\n  teacherPerformance: Array<{\n    teacherId: string;\n    teacherName: string;\n    totalClasses: number;\n    totalStudents: number;\n    averageRating: number;\n    totalRevenue: number;\n  }>;\n  popularClasses: Array<{\n    classId: string;\n    title: string;\n    enrollmentCount: number;\n    completionRate: number;\n    averageRating: number;\n    revenue: number;\n  }>;\n  revenueBreakdown: {\n    bySubject: Array<{\n      subject: string;\n      revenue: number;\n      percentage: number;\n    }>;\n    byMonth: Array<{\n      month: string;\n      revenue: number;\n      growth: number;\n    }>;\n  };\n}\n\nexport function AdminReports() {\n  const [reportPeriod, setReportPeriod] = useState(\"month\");\n  const [reportType, setReportType] = useState(\"overview\");\n\n  const { data: reports, isLoading } = useQuery<PlatformReports>({\n    queryKey: [\"/api/admin/reports\", reportPeriod],\n  });\n\n  const mockReports: PlatformReports = reports || {\n    overview: {\n      totalUsers: 0,\n      totalClasses: 0,\n      totalRevenue: 0,\n      activeTeachers: 0,\n      completionRate: 0,\n      userGrowth: 0,\n      revenueGrowth: 0\n    },\n    userEngagement: {\n      dailyActiveUsers: 0,\n      averageSessionDuration: 0,\n      classCompletionRate: 0,\n      repeatEnrollmentRate: 0\n    },\n    teacherPerformance: [],\n    popularClasses: [],\n    revenueBreakdown: {\n      bySubject: [],\n      byMonth: []\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <AdminSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading reports...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <AdminSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Platform Reports</h1>\n                <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Analytics and insights for platform performance</p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Select value={reportPeriod} onValueChange={setReportPeriod}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-period\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                    <SelectItem value=\"quarter\">This Quarter</SelectItem>\n                    <SelectItem value=\"year\">This Year</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" data-testid=\"button-refresh\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n                <Button variant=\"outline\" data-testid=\"button-export\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Overview Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-total-users\">\n                  {mockReports.overview.totalUsers}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {mockReports.overview.userGrowth > 0 ? '+' : ''}{mockReports.overview.userGrowth}% from last period\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Classes</CardTitle>\n                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-total-classes\">\n                  {mockReports.overview.totalClasses}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {mockReports.overview.activeTeachers} active teachers\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-total-revenue\">\n                  ${mockReports.overview.totalRevenue.toFixed(2)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {mockReports.overview.revenueGrowth > 0 ? '+' : ''}{mockReports.overview.revenueGrowth}% from last period\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-completion-rate\">\n                  {mockReports.overview.completionRate.toFixed(1)}%\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Average class completion</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Top Teachers */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"w-5 h-5 mr-2\" />\n                  Top Performing Teachers\n                </CardTitle>\n                <CardDescription>Teachers with highest engagement and revenue</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {mockReports.teacherPerformance.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-teacher-data\">\n                    No teacher performance data available\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {mockReports.teacherPerformance.slice(0, 5).map((teacher) => (\n                      <div key={teacher.teacherId} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\" data-testid={`teacher-name-${teacher.teacherId}`}>\n                            {teacher.teacherName}\n                          </h4>\n                          <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-300\">\n                            <span data-testid={`teacher-classes-${teacher.teacherId}`}>\n                              {teacher.totalClasses} classes\n                            </span>\n                            <span data-testid={`teacher-students-${teacher.teacherId}`}>\n                              {teacher.totalStudents} students\n                            </span>\n                            <span data-testid={`teacher-rating-${teacher.teacherId}`}>\n                              {teacher.averageRating.toFixed(1)}★\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-green-600\" data-testid={`teacher-revenue-${teacher.teacherId}`}>\n                            ${teacher.totalRevenue.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Popular Classes */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BookOpen className=\"w-5 h-5 mr-2\" />\n                  Most Popular Classes\n                </CardTitle>\n                <CardDescription>Classes with highest enrollment and completion</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {mockReports.popularClasses.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-class-data\">\n                    No class performance data available\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {mockReports.popularClasses.slice(0, 5).map((classItem) => (\n                      <div key={classItem.classId} className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <h4 className=\"font-medium\" data-testid={`class-title-${classItem.classId}`}>\n                            {classItem.title}\n                          </h4>\n                          <Badge variant=\"outline\" data-testid={`class-rating-${classItem.classId}`}>\n                            {classItem.averageRating.toFixed(1)}★\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-300\">\n                          <div className=\"flex items-center gap-4\">\n                            <span data-testid={`class-enrollments-${classItem.classId}`}>\n                              {classItem.enrollmentCount} enrolled\n                            </span>\n                            <span data-testid={`class-completion-${classItem.classId}`}>\n                              {classItem.completionRate.toFixed(1)}% completed\n                            </span>\n                          </div>\n                          <p className=\"font-semibold text-green-600\" data-testid={`class-revenue-${classItem.classId}`}>\n                            ${classItem.revenue.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Revenue Breakdown */}\n          {mockReports.revenueBreakdown.bySubject.length > 0 && (\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <DollarSign className=\"w-5 h-5 mr-2\" />\n                  Revenue by Subject\n                </CardTitle>\n                <CardDescription>Revenue distribution across different subjects</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {mockReports.revenueBreakdown.bySubject.map((subject) => (\n                    <div key={subject.subject} className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium capitalize\" data-testid={`subject-name-${subject.subject}`}>\n                          {subject.subject}\n                        </h4>\n                        <Badge variant=\"outline\" data-testid={`subject-percentage-${subject.subject}`}>\n                          {subject.percentage.toFixed(1)}%\n                        </Badge>\n                      </div>\n                      <p className=\"text-xl font-bold text-green-600\" data-testid={`subject-revenue-${subject.subject}`}>\n                        ${subject.revenue.toFixed(2)}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* User Engagement */}\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                User Engagement Metrics\n              </CardTitle>\n              <CardDescription>Platform usage and engagement statistics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold mb-1\" data-testid=\"engagement-daily-users\">\n                    {mockReports.userEngagement.dailyActiveUsers}\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">Daily Active Users</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold mb-1\" data-testid=\"engagement-session-duration\">\n                    {mockReports.userEngagement.averageSessionDuration}m\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">Avg Session Duration</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold mb-1\" data-testid=\"engagement-completion-rate\">\n                    {mockReports.userEngagement.classCompletionRate.toFixed(1)}%\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">Class Completion Rate</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold mb-1\" data-testid=\"engagement-repeat-rate\">\n                    {mockReports.userEngagement.repeatEnrollmentRate.toFixed(1)}%\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">Repeat Enrollment Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":15800},"client/src/pages/admin-users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Mail, Ban, CheckCircle, MoreHorizontal } from \"lucide-react\";\nimport { AdminSidebar } from \"@/components/admin-sidebar\";\nimport { User } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function AdminUsers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"\");\n  const { toast } = useToast();\n  \n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, updates }: { userId: string; updates: Partial<User> }) => {\n      return apiRequest(\"PATCH\", `/api/admin/users/${userId}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredUsers = users?.filter(user => {\n    const matchesSearch = user.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesRole = !roleFilter || user.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'teacher': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'student': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const handleRoleChange = (userId: string, newRole: string) => {\n    updateUserMutation.mutate({ userId, updates: { role: newRole } });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <AdminSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading users...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <AdminSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">User Management</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Manage platform users and their permissions</p>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search users by name or email...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-role-filter\">\n                <SelectValue placeholder=\"All roles\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All roles</SelectItem>\n                <SelectItem value=\"student\">Students</SelectItem>\n                <SelectItem value=\"teacher\">Teachers</SelectItem>\n                <SelectItem value=\"admin\">Admins</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Total Users</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"stat-total-users\">\n                  {users?.length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Teachers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"stat-teachers\">\n                  {users?.filter(u => u.role === 'teacher').length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Students</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"stat-students\">\n                  {users?.filter(u => u.role === 'student').length || 0}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Users Table */}\n          {!filteredUsers || filteredUsers.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-users\">\n                  {searchQuery || roleFilter ? \"No users found\" : \"No users yet\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  {searchQuery || roleFilter \n                    ? \"Try adjusting your search or filters\"\n                    : \"Users will appear here as they sign up\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle>Users ({filteredUsers.length})</CardTitle>\n                <CardDescription>Manage user accounts and permissions</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-0 divide-y\">\n                  {filteredUsers.map((user) => (\n                    <div key={user.id} className=\"p-6 flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4 flex-1\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback data-testid={`avatar-${user.id}`}>\n                            {user.firstName[0]}{user.lastName[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <h3 className=\"font-semibold\" data-testid={`text-user-name-${user.id}`}>\n                              {user.firstName} {user.lastName}\n                            </h3>\n                            <Badge className={getRoleColor(user.role)} data-testid={`badge-role-${user.id}`}>\n                              {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\" data-testid={`text-user-email-${user.id}`}>\n                            {user.email}\n                          </p>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\" data-testid={`text-user-date-${user.id}`}>\n                            Joined {new Date(user.createdAt!).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Select \n                          value={user.role} \n                          onValueChange={(newRole) => handleRoleChange(user.id, newRole)}\n                        >\n                          <SelectTrigger className=\"w-32\" data-testid={`select-user-role-${user.id}`}>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"student\">Student</SelectItem>\n                            <SelectItem value=\"teacher\">Teacher</SelectItem>\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        \n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-email-${user.id}`}>\n                          <Mail className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${user.id}`}>\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":9887},"client/src/pages/student-browse.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Search, Filter, CalendarDays, Clock, Users, Star } from \"lucide-react\";\nimport { StudentSidebar } from \"@/components/student-sidebar\";\nimport { Class, User } from \"@shared/schema\";\n\ninterface ClassWithTeacher extends Class {\n  teacher: User;\n}\n\nexport function StudentBrowse() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [subjectFilter, setSubjectFilter] = useState(\"\");\n  \n  const { data: classes, isLoading } = useQuery<ClassWithTeacher[]>({\n    queryKey: [\"/api/classes/browse\"],\n  });\n\n  const filteredClasses = classes?.filter(classItem => {\n    const matchesSearch = classItem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classItem.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classItem.teacher.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classItem.teacher.lastName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesSubject = !subjectFilter || classItem.subject === subjectFilter;\n    \n    return matchesSearch && matchesSubject;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <StudentSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading classes...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <StudentSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Browse Classes</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Discover and enroll in live classes</p>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search classes, teachers, or topics...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={subjectFilter} onValueChange={setSubjectFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-subject-filter\">\n                <SelectValue placeholder=\"All subjects\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All subjects</SelectItem>\n                <SelectItem value=\"programming\">Programming</SelectItem>\n                <SelectItem value=\"design\">Design</SelectItem>\n                <SelectItem value=\"business\">Business</SelectItem>\n                <SelectItem value=\"marketing\">Marketing</SelectItem>\n                <SelectItem value=\"data-science\">Data Science</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {!filteredClasses || filteredClasses.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-classes\">\n                  {searchQuery || subjectFilter ? \"No classes found\" : \"No classes available\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  {searchQuery || subjectFilter \n                    ? \"Try adjusting your search or filters\"\n                    : \"Check back later for new classes\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              {filteredClasses?.map((classItem) => (\n                <Card key={classItem.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <Badge variant=\"secondary\" data-testid={`badge-subject-${classItem.id}`}>\n                        {classItem.subject}\n                      </Badge>\n                      {classItem.isLive && (\n                        <Badge className=\"bg-red-500 hover:bg-red-600\" data-testid={`badge-live-${classItem.id}`}>\n                          LIVE\n                        </Badge>\n                      )}\n                    </div>\n                    <CardTitle className=\"text-lg mb-2\" data-testid={`text-class-title-${classItem.id}`}>\n                      {classItem.title}\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-2 mb-4\" data-testid={`text-class-description-${classItem.id}`}>\n                      {classItem.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {/* Teacher Info */}\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback data-testid={`avatar-teacher-${classItem.id}`}>\n                          {classItem.teacher.firstName[0]}{classItem.teacher.lastName[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"text-sm font-medium\" data-testid={`text-teacher-name-${classItem.id}`}>\n                          {classItem.teacher.firstName} {classItem.teacher.lastName}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Class Details */}\n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <CalendarDays className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-date-${classItem.id}`}>\n                          {new Date(classItem.date).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-duration-${classItem.id}`}>\n                          {classItem.duration} minutes\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-capacity-${classItem.id}`}>\n                          {classItem.maxStudents} max students\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Pricing and Enrollment */}\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold text-green-600\" data-testid={`text-class-price-${classItem.id}`}>\n                        ${classItem.price}\n                      </span>\n                      <Button data-testid={`button-enroll-${classItem.id}`}>\n                        Enroll Now\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8165},"client/src/pages/student-enrolled.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { CalendarDays, Clock, Video, BookOpen, Star } from \"lucide-react\";\nimport { StudentSidebar } from \"@/components/student-sidebar\";\nimport { Class, User, Enrollment } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface EnrolledClass extends Class {\n  teacher: User;\n  enrollment: Enrollment;\n  progress?: number;\n}\n\nexport function StudentEnrolled() {\n  const { data: enrolledClasses, isLoading } = useQuery<EnrolledClass[]>({\n    queryKey: [\"/api/student/enrolled\"],\n  });\n\n  const upcomingClasses = enrolledClasses?.filter(c => new Date(c.date) > new Date() && !c.enrollment.completed);\n  const completedClasses = enrolledClasses?.filter(c => c.enrollment.completed);\n  const inProgressClasses = enrolledClasses?.filter(c => !c.enrollment.completed && new Date(c.date) <= new Date());\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <StudentSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading your classes...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <StudentSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">My Classes</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Track your learning journey</p>\n          </div>\n\n          {!enrolledClasses || enrolledClasses.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <BookOpen className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-enrolled\">No enrolled classes</h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  Start learning by browsing and enrolling in classes\n                </p>\n                <Button asChild data-testid=\"button-browse-classes\">\n                  <Link href=\"/student/browse\">Browse Classes</Link>\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-8\">\n              {/* Upcoming Classes */}\n              {upcomingClasses && upcomingClasses.length > 0 && (\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Upcoming Classes</h2>\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {upcomingClasses.map((classItem) => (\n                      <Card key={classItem.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge variant=\"outline\" data-testid={`badge-subject-${classItem.id}`}>\n                              {classItem.subject}\n                            </Badge>\n                            <Badge variant=\"secondary\" data-testid={`badge-upcoming-${classItem.id}`}>\n                              Upcoming\n                            </Badge>\n                          </div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-class-title-${classItem.id}`}>\n                            {classItem.title}\n                          </CardTitle>\n                          <CardDescription data-testid={`text-class-description-${classItem.id}`}>\n                            {classItem.description}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"flex items-center gap-3 mb-4\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback data-testid={`avatar-teacher-${classItem.id}`}>\n                                {classItem.teacher.firstName[0]}{classItem.teacher.lastName[0]}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"text-sm font-medium\" data-testid={`text-teacher-name-${classItem.id}`}>\n                                {classItem.teacher.firstName} {classItem.teacher.lastName}\n                              </p>\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-2 mb-4\">\n                            <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                              <CalendarDays className=\"w-4 h-4 mr-2\" />\n                              <span data-testid={`text-class-date-${classItem.id}`}>\n                                {new Date(classItem.date).toLocaleDateString()}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                              <Clock className=\"w-4 h-4 mr-2\" />\n                              <span data-testid={`text-class-time-${classItem.id}`}>\n                                {new Date(classItem.date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                              </span>\n                            </div>\n                          </div>\n\n                          <Button className=\"w-full\" data-testid={`button-join-${classItem.id}`}>\n                            <Video className=\"w-4 h-4 mr-2\" />\n                            Join Class\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </section>\n              )}\n\n              {/* In Progress Classes */}\n              {inProgressClasses && inProgressClasses.length > 0 && (\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">In Progress</h2>\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    {inProgressClasses.map((classItem) => (\n                      <Card key={classItem.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge variant=\"outline\" data-testid={`badge-subject-${classItem.id}`}>\n                              {classItem.subject}\n                            </Badge>\n                            <Badge className=\"bg-blue-500 hover:bg-blue-600\" data-testid={`badge-progress-${classItem.id}`}>\n                              In Progress\n                            </Badge>\n                          </div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-class-title-${classItem.id}`}>\n                            {classItem.title}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"mb-4\">\n                            <div className=\"flex items-center justify-between text-sm mb-2\">\n                              <span>Progress</span>\n                              <span data-testid={`text-progress-${classItem.id}`}>\n                                {classItem.progress || 0}%\n                              </span>\n                            </div>\n                            <Progress value={classItem.progress || 0} className=\"h-2\" />\n                          </div>\n                          \n                          <Button className=\"w-full\" data-testid={`button-continue-${classItem.id}`}>\n                            Continue Learning\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </section>\n              )}\n\n              {/* Completed Classes */}\n              {completedClasses && completedClasses.length > 0 && (\n                <section>\n                  <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Completed</h2>\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {completedClasses.map((classItem) => (\n                      <Card key={classItem.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge variant=\"outline\" data-testid={`badge-subject-${classItem.id}`}>\n                              {classItem.subject}\n                            </Badge>\n                            <Badge variant=\"default\" data-testid={`badge-completed-${classItem.id}`}>\n                              Completed\n                            </Badge>\n                          </div>\n                          <CardTitle className=\"text-lg\" data-testid={`text-class-title-${classItem.id}`}>\n                            {classItem.title}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"flex items-center gap-3 mb-4\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback data-testid={`avatar-teacher-${classItem.id}`}>\n                                {classItem.teacher.firstName[0]}{classItem.teacher.lastName[0]}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"text-sm font-medium\" data-testid={`text-teacher-name-${classItem.id}`}>\n                                {classItem.teacher.firstName} {classItem.teacher.lastName}\n                              </p>\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center justify-between\">\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-review-${classItem.id}`}>\n                              <Star className=\"w-4 h-4 mr-2\" />\n                              Leave Review\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-content-${classItem.id}`}>\n                              View Content\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </section>\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11244},"client/src/pages/student-library.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileText, Video, Image, Search, Download, BookOpen, Play } from \"lucide-react\";\nimport { StudentSidebar } from \"@/components/student-sidebar\";\nimport { Content } from \"@shared/schema\";\n\ninterface ContentWithClass extends Content {\n  className: string;\n}\n\nexport function StudentLibrary() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const { data: content, isLoading } = useQuery<ContentWithClass[]>({\n    queryKey: [\"/api/student/library\"],\n  });\n\n  const filteredContent = content?.filter(item =>\n    item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.className.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.content?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const videoContent = filteredContent?.filter(item => item.type === 'video');\n  const pdfContent = filteredContent?.filter(item => item.type === 'pdf');\n  const slideContent = filteredContent?.filter(item => item.type === 'slide');\n  const noteContent = filteredContent?.filter(item => item.type === 'note');\n\n  const getContentIcon = (type: string) => {\n    switch (type) {\n      case \"video\": return <Video className=\"w-5 h-5\" />;\n      case \"pdf\": return <FileText className=\"w-5 h-5\" />;\n      case \"slide\": return <Image className=\"w-5 h-5\" />;\n      default: return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getContentTypeColor = (type: string) => {\n    switch (type) {\n      case \"video\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"pdf\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"slide\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n    }\n  };\n\n  const renderContentGrid = (items: ContentWithClass[] | undefined, emptyMessage: string) => {\n    if (!items || items.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\" data-testid=\"text-no-content\">{emptyMessage}</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {items.map((item) => (\n          <Card key={item.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className={`p-2 rounded-lg ${getContentTypeColor(item.type)}`}>\n                  {getContentIcon(item.type)}\n                </div>\n                <Badge variant=\"outline\" data-testid={`badge-type-${item.id}`}>\n                  {item.type.toUpperCase()}\n                </Badge>\n              </div>\n              <CardTitle className=\"text-lg\" data-testid={`text-content-title-${item.id}`}>\n                {item.title}\n              </CardTitle>\n              <CardDescription data-testid={`text-class-name-${item.id}`}>\n                From: {item.className}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {item.content && (\n                <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-3\" data-testid={`text-content-description-${item.id}`}>\n                  {item.content}\n                </p>\n              )}\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\" data-testid={`text-content-date-${item.id}`}>\n                  {new Date(item.createdAt!).toLocaleDateString()}\n                </span>\n                \n                <div className=\"flex gap-2\">\n                  {item.type === 'video' ? (\n                    <Button size=\"sm\" data-testid={`button-play-${item.id}`}>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Play\n                    </Button>\n                  ) : (\n                    <Button size=\"sm\" data-testid={`button-view-${item.id}`}>\n                      <BookOpen className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                  )}\n                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-${item.id}`}>\n                    <Download className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <StudentSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading your library...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <StudentSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Content Library</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Access materials from your enrolled classes</p>\n          </div>\n\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search content, classes, or topics...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n\n          {!content || content.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <BookOpen className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-library\">No content available</h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  Content from your enrolled classes will appear here\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <Tabs defaultValue=\"all\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n                  All ({filteredContent?.length || 0})\n                </TabsTrigger>\n                <TabsTrigger value=\"videos\" data-testid=\"tab-videos\">\n                  Videos ({videoContent?.length || 0})\n                </TabsTrigger>\n                <TabsTrigger value=\"pdfs\" data-testid=\"tab-pdfs\">\n                  PDFs ({pdfContent?.length || 0})\n                </TabsTrigger>\n                <TabsTrigger value=\"slides\" data-testid=\"tab-slides\">\n                  Slides ({slideContent?.length || 0})\n                </TabsTrigger>\n                <TabsTrigger value=\"notes\" data-testid=\"tab-notes\">\n                  Notes ({noteContent?.length || 0})\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"all\">\n                {renderContentGrid(filteredContent, \n                  searchQuery ? \"No content found matching your search\" : \"No content available\"\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"videos\">\n                {renderContentGrid(videoContent, \"No video content available\")}\n              </TabsContent>\n\n              <TabsContent value=\"pdfs\">\n                {renderContentGrid(pdfContent, \"No PDF content available\")}\n              </TabsContent>\n\n              <TabsContent value=\"slides\">\n                {renderContentGrid(slideContent, \"No slide content available\")}\n              </TabsContent>\n\n              <TabsContent value=\"notes\">\n                {renderContentGrid(noteContent, \"No notes available\")}\n              </TabsContent>\n            </Tabs>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8493},"client/src/pages/student-live.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Video, Mic, MicOff, VideoOff, Hand, MessageCircle, Users, Settings } from \"lucide-react\";\nimport { StudentSidebar } from \"@/components/student-sidebar\";\nimport { Class, User, Message } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface LiveClass extends Class {\n  teacher: User;\n  participantCount: number;\n  messages: Message[];\n}\n\nexport function StudentLive() {\n  const [message, setMessage] = useState(\"\");\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isAudioOn, setIsAudioOn] = useState(true);\n  const [handRaised, setHandRaised] = useState(false);\n\n  const { data: liveClasses, isLoading } = useQuery<LiveClass[]>({\n    queryKey: [\"/api/classes/live\"],\n  });\n\n  const handleSendMessage = () => {\n    if (message.trim()) {\n      // TODO: Send message via WebSocket\n      setMessage(\"\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <StudentSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading live classes...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Show available live classes if not in a specific class\n  if (!liveClasses || liveClasses.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <StudentSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Live Classes</h1>\n              <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Join ongoing live classes</p>\n            </div>\n\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Video className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-live-classes\">No live classes</h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  There are no live classes at the moment. Check your enrolled classes for upcoming sessions.\n                </p>\n                <Button asChild data-testid=\"button-my-classes\">\n                  <Link href=\"/student/enrolled\">View My Classes</Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Show list of available live classes\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <StudentSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Live Classes</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Join ongoing live classes</p>\n          </div>\n\n          <div className=\"grid gap-6\">\n            {liveClasses.map((liveClass) => (\n              <Card key={liveClass.id} className=\"border-l-4 border-l-red-500\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge className=\"bg-red-500 hover:bg-red-600 animate-pulse\" data-testid={`badge-live-${liveClass.id}`}>\n                          LIVE\n                        </Badge>\n                        <Badge variant=\"outline\" data-testid={`badge-subject-${liveClass.id}`}>\n                          {liveClass.subject}\n                        </Badge>\n                      </div>\n                      <CardTitle className=\"text-xl mb-2\" data-testid={`text-class-title-${liveClass.id}`}>\n                        {liveClass.title}\n                      </CardTitle>\n                      <CardDescription data-testid={`text-class-description-${liveClass.id}`}>\n                        {liveClass.description}\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback data-testid={`avatar-teacher-${liveClass.id}`}>\n                            {liveClass.teacher.firstName[0]}{liveClass.teacher.lastName[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium text-sm\" data-testid={`text-teacher-name-${liveClass.id}`}>\n                            {liveClass.teacher.firstName} {liveClass.teacher.lastName}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-1 text-sm text-gray-600 dark:text-gray-300\">\n                        <Users className=\"w-4 h-4\" />\n                        <span data-testid={`text-participant-count-${liveClass.id}`}>\n                          {liveClass.participantCount} participants\n                        </span>\n                      </div>\n                    </div>\n\n                    <Button size=\"lg\" className=\"bg-red-500 hover:bg-red-600\" data-testid={`button-join-${liveClass.id}`}>\n                      <Video className=\"w-4 h-4 mr-2\" />\n                      Join Live Class\n                    </Button>\n                  </div>\n\n                  {/* Live Class Interface (when joining) */}\n                  <div className=\"hidden border-t pt-6\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n                      {/* Video Area */}\n                      <div className=\"lg:col-span-3\">\n                        <div className=\"bg-black rounded-lg aspect-video mb-4 flex items-center justify-center\">\n                          <div className=\"text-white text-center\">\n                            <Video className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                            <p>Video stream will appear here</p>\n                          </div>\n                        </div>\n\n                        {/* Controls */}\n                        <div className=\"flex items-center justify-center gap-4\">\n                          <Button\n                            variant={isAudioOn ? \"default\" : \"destructive\"}\n                            size=\"sm\"\n                            onClick={() => setIsAudioOn(!isAudioOn)}\n                            data-testid=\"button-toggle-audio\"\n                          >\n                            {isAudioOn ? <Mic className=\"w-4 h-4\" /> : <MicOff className=\"w-4 h-4\" />}\n                          </Button>\n                          <Button\n                            variant={isVideoOn ? \"default\" : \"destructive\"}\n                            size=\"sm\"\n                            onClick={() => setIsVideoOn(!isVideoOn)}\n                            data-testid=\"button-toggle-video\"\n                          >\n                            {isVideoOn ? <Video className=\"w-4 h-4\" /> : <VideoOff className=\"w-4 h-4\" />}\n                          </Button>\n                          <Button\n                            variant={handRaised ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => setHandRaised(!handRaised)}\n                            data-testid=\"button-raise-hand\"\n                          >\n                            <Hand className={`w-4 h-4 ${handRaised ? 'text-yellow-500' : ''}`} />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-settings\">\n                            <Settings className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Chat */}\n                      <div className=\"lg:col-span-1\">\n                        <Card className=\"h-96\">\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-sm flex items-center\">\n                              <MessageCircle className=\"w-4 h-4 mr-2\" />\n                              Chat\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"p-0\">\n                            <ScrollArea className=\"h-60 px-4\">\n                              <div className=\"space-y-3\">\n                                {liveClass.messages?.map((msg, index) => (\n                                  <div key={index} className=\"text-sm\" data-testid={`message-${index}`}>\n                                    <span className=\"font-semibold\">Student:</span>\n                                    <p className=\"text-gray-600 dark:text-gray-300\">{msg.message}</p>\n                                  </div>\n                                ))}\n                              </div>\n                            </ScrollArea>\n                            <div className=\"flex gap-2 p-4 border-t\">\n                              <Input\n                                placeholder=\"Type a message...\"\n                                value={message}\n                                onChange={(e) => setMessage(e.target.value)}\n                                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                                data-testid=\"input-chat-message\"\n                              />\n                              <Button size=\"sm\" onClick={handleSendMessage} data-testid=\"button-send-message\">\n                                Send\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":10706},"client/src/pages/student-progress.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { BarChart3, TrendingUp, Award, Clock, CheckCircle, Star } from \"lucide-react\";\nimport { StudentSidebar } from \"@/components/student-sidebar\";\nimport { Class, User, Enrollment } from \"@shared/schema\";\n\ninterface ProgressData {\n  totalEnrolled: number;\n  totalCompleted: number;\n  totalHoursLearned: number;\n  averageRating: number;\n  completionRate: number;\n  recentActivity: Array<{\n    type: 'enrollment' | 'completion' | 'rating';\n    className: string;\n    timestamp: string;\n    value?: number;\n  }>;\n  enrolledClasses: Array<{\n    id: string;\n    title: string;\n    teacher: User;\n    enrollment: Enrollment;\n    progress: number;\n    duration: number;\n  }>;\n}\n\nexport function StudentProgress() {\n  const { data: progressData, isLoading } = useQuery<ProgressData>({\n    queryKey: [\"/api/student/progress\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <StudentSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading your progress...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const mockProgress: ProgressData = progressData || {\n    totalEnrolled: 0,\n    totalCompleted: 0,\n    totalHoursLearned: 0,\n    averageRating: 0,\n    completionRate: 0,\n    recentActivity: [],\n    enrolledClasses: []\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <StudentSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Learning Progress</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Track your learning journey and achievements</p>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Classes Enrolled</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-enrolled\">\n                  {mockProgress.totalEnrolled}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total enrollments</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Classes Completed</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-completed\">\n                  {mockProgress.totalCompleted}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Successfully finished</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Hours Learned</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-hours\">\n                  {mockProgress.totalHoursLearned}h\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Time invested</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Average Rating</CardTitle>\n                <Star className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-rating\">\n                  {mockProgress.averageRating > 0 ? mockProgress.averageRating.toFixed(1) : \"N/A\"}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Your ratings</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Current Classes Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2\" />\n                  Current Classes\n                </CardTitle>\n                <CardDescription>Your progress in enrolled classes</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {mockProgress.enrolledClasses.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-current-classes\">\n                    No classes in progress\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {mockProgress.enrolledClasses.map((classItem) => (\n                      <div key={classItem.id} className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium mb-1\" data-testid={`progress-class-title-${classItem.id}`}>\n                              {classItem.title}\n                            </h4>\n                            <div className=\"flex items-center gap-2\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarFallback className=\"text-xs\" data-testid={`progress-teacher-avatar-${classItem.id}`}>\n                                  {classItem.teacher.firstName[0]}{classItem.teacher.lastName[0]}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-sm text-gray-600 dark:text-gray-300\" data-testid={`progress-teacher-name-${classItem.id}`}>\n                                {classItem.teacher.firstName} {classItem.teacher.lastName}\n                              </span>\n                            </div>\n                          </div>\n                          <Badge \n                            variant={classItem.enrollment.completed ? \"default\" : \"secondary\"}\n                            data-testid={`progress-status-${classItem.id}`}\n                          >\n                            {classItem.enrollment.completed ? \"Completed\" : \"In Progress\"}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"mb-2\">\n                          <div className=\"flex items-center justify-between text-sm mb-1\">\n                            <span>Progress</span>\n                            <span data-testid={`progress-percentage-${classItem.id}`}>\n                              {classItem.progress}%\n                            </span>\n                          </div>\n                          <Progress value={classItem.progress} className=\"h-2\" />\n                        </div>\n                        \n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\" data-testid={`progress-duration-${classItem.id}`}>\n                          Duration: {classItem.duration} minutes\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Award className=\"w-5 h-5 mr-2\" />\n                  Recent Activity\n                </CardTitle>\n                <CardDescription>Your latest learning milestones</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {mockProgress.recentActivity.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-recent-activity\">\n                    No recent activity\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {mockProgress.recentActivity.map((activity, index) => (\n                      <div key={index} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex-shrink-0 mt-1\">\n                          <Badge \n                            variant={activity.type === 'completion' ? 'default' : activity.type === 'rating' ? 'secondary' : 'outline'}\n                            data-testid={`activity-badge-${index}`}\n                          >\n                            {activity.type}\n                          </Badge>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm\" data-testid={`activity-description-${index}`}>\n                            {activity.type === 'enrollment' && `Enrolled in ${activity.className}`}\n                            {activity.type === 'completion' && `Completed ${activity.className}`}\n                            {activity.type === 'rating' && `Rated ${activity.className}`}\n                            {activity.type === 'rating' && activity.value && (\n                              <span className=\"ml-1\">({activity.value}/5 stars)</span>\n                            )}\n                          </p>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\" data-testid={`activity-timestamp-${index}`}>\n                            {new Date(activity.timestamp).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Overall Completion Rate */}\n          {mockProgress.totalEnrolled > 0 && (\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle>Overall Completion Rate</CardTitle>\n                <CardDescription>Your success rate across all enrolled classes</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-2xl font-bold\" data-testid=\"text-completion-rate\">\n                    {mockProgress.completionRate.toFixed(1)}%\n                  </span>\n                  <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {mockProgress.totalCompleted} of {mockProgress.totalEnrolled} classes completed\n                  </span>\n                </div>\n                <Progress value={mockProgress.completionRate} className=\"h-3\" />\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":11631},"client/src/pages/teacher-analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart3, Users, DollarSign, BookOpen, TrendingUp, Clock } from \"lucide-react\";\nimport { TeacherSidebar } from \"@/components/teacher-sidebar\";\n\ninterface TeacherAnalytics {\n  totalClasses: number;\n  totalStudents: number;\n  totalRevenue: number;\n  averageRating: number;\n  completionRate: number;\n  popularClasses: Array<{\n    id: string;\n    title: string;\n    enrollmentCount: number;\n    revenue: number;\n  }>;\n  recentActivity: Array<{\n    type: 'enrollment' | 'completion' | 'rating';\n    studentName: string;\n    className: string;\n    timestamp: string;\n    value?: number;\n  }>;\n}\n\nexport function TeacherAnalytics() {\n  const { data: analytics, isLoading } = useQuery<TeacherAnalytics>({\n    queryKey: [\"/api/teacher/analytics\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <TeacherSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading analytics...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const mockAnalytics: TeacherAnalytics = analytics || {\n    totalClasses: 0,\n    totalStudents: 0,\n    totalRevenue: 0,\n    averageRating: 0,\n    completionRate: 0,\n    popularClasses: [],\n    recentActivity: []\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <TeacherSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Analytics</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Track your teaching performance and student engagement</p>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Classes</CardTitle>\n                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-total-classes\">\n                  {mockAnalytics.totalClasses}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Active and completed</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-total-students\">\n                  {mockAnalytics.totalStudents}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Across all classes</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-total-revenue\">\n                  ${mockAnalytics.totalRevenue.toFixed(2)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">From all classes</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Average Rating</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"metric-average-rating\">\n                  {mockAnalytics.averageRating > 0 ? mockAnalytics.averageRating.toFixed(1) : \"N/A\"}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Out of 5 stars</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Popular Classes */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"w-5 h-5 mr-2\" />\n                  Popular Classes\n                </CardTitle>\n                <CardDescription>Classes with the most enrollments</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {mockAnalytics.popularClasses.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-popular-classes\">\n                    No enrollment data yet\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {mockAnalytics.popularClasses.map((classItem) => (\n                      <div key={classItem.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\" data-testid={`popular-class-title-${classItem.id}`}>\n                            {classItem.title}\n                          </h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\" data-testid={`popular-class-enrollment-${classItem.id}`}>\n                            {classItem.enrollmentCount} students enrolled\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-green-600\" data-testid={`popular-class-revenue-${classItem.id}`}>\n                            ${classItem.revenue.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"w-5 h-5 mr-2\" />\n                  Recent Activity\n                </CardTitle>\n                <CardDescription>Latest student interactions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {mockAnalytics.recentActivity.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-recent-activity\">\n                    No recent activity\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {mockAnalytics.recentActivity.map((activity, index) => (\n                      <div key={index} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex-shrink-0 mt-1\">\n                          <Badge \n                            variant={activity.type === 'enrollment' ? 'default' : activity.type === 'completion' ? 'secondary' : 'outline'}\n                            data-testid={`activity-badge-${index}`}\n                          >\n                            {activity.type}\n                          </Badge>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm\" data-testid={`activity-description-${index}`}>\n                            <span className=\"font-medium\">{activity.studentName}</span>\n                            {activity.type === 'enrollment' && ' enrolled in '}\n                            {activity.type === 'completion' && ' completed '}\n                            {activity.type === 'rating' && ' rated '}\n                            <span className=\"font-medium\">{activity.className}</span>\n                            {activity.type === 'rating' && activity.value && (\n                              <span className=\"ml-1\">({activity.value}/5 stars)</span>\n                            )}\n                          </p>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\" data-testid={`activity-timestamp-${index}`}>\n                            {new Date(activity.timestamp).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":9145},"client/src/pages/teacher-classes.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarDays, Clock, Users, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { TeacherSidebar } from \"@/components/teacher-sidebar\";\nimport { Class } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\n\nexport function TeacherClasses() {\n  const { data: classes, isLoading } = useQuery<Class[]>({\n    queryKey: [\"/api/teacher/classes\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <TeacherSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading classes...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <TeacherSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">My Classes</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Manage your classes and view enrollments</p>\n          </div>\n\n          {classes && classes.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-classes\">No classes yet</h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  Create your first class to start teaching\n                </p>\n                <Button asChild data-testid=\"button-create-first-class\">\n                  <Link href=\"/teacher/create\">Create Your First Class</Link>\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-6\">\n              {classes?.map((classItem) => (\n                <Card key={classItem.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl mb-2\" data-testid={`text-class-title-${classItem.id}`}>\n                          {classItem.title}\n                        </CardTitle>\n                        <CardDescription data-testid={`text-class-description-${classItem.id}`}>\n                          {classItem.description}\n                        </CardDescription>\n                      </div>\n                      <Badge variant={classItem.isLive ? \"default\" : \"secondary\"} data-testid={`badge-status-${classItem.id}`}>\n                        {classItem.isLive ? \"Live\" : \"Scheduled\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <CalendarDays className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-date-${classItem.id}`}>\n                          {format(new Date(classItem.date), 'MMM dd, yyyy')}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <Clock className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-duration-${classItem.id}`}>\n                          {classItem.duration} mins\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-class-capacity-${classItem.id}`}>\n                          0/{classItem.maxStudents} enrolled\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-300\">\n                        <span className=\"text-lg font-semibold text-green-600\" data-testid={`text-class-price-${classItem.id}`}>\n                          ${classItem.price}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${classItem.id}`}>\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        View Details\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-${classItem.id}`}>\n                        <Edit className=\"w-4 h-4 mr-2\" />\n                        Edit\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-700\" data-testid={`button-delete-${classItem.id}`}>\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":5585},"client/src/pages/teacher-content.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FileText, Video, Image, Upload, Search, Filter, Download, Trash2, Plus, Sparkles } from \"lucide-react\";\nimport { TeacherSidebar } from \"@/components/teacher-sidebar\";\nimport { Content } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function TeacherContent() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [uploadForm, setUploadForm] = useState({\n    title: \"\",\n    content: \"\",\n    type: \"pdf\" as const,\n    file: null as File | null\n  });\n  const { toast } = useToast();\n  \n  const { data: content, isLoading } = useQuery<Content[]>({\n    queryKey: [\"/api/teacher/content\"],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      return apiRequest(\"POST\", \"/api/teacher/content\", formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teacher/content\"] });\n      setUploadDialogOpen(false);\n      setUploadForm({ title: \"\", content: \"\", type: \"pdf\", file: null });\n      toast({ title: \"Success\", description: \"Content uploaded successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to upload content\", variant: \"destructive\" });\n    }\n  });\n\n  const handleUpload = () => {\n    if (!uploadForm.title || !uploadForm.file) {\n      toast({ title: \"Error\", description: \"Please fill all required fields\", variant: \"destructive\" });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"title\", uploadForm.title);\n    formData.append(\"content\", uploadForm.content);\n    formData.append(\"type\", uploadForm.type);\n    formData.append(\"file\", uploadForm.file);\n\n    uploadMutation.mutate(formData);\n  };\n\n  const getContentIcon = (type: string) => {\n    switch (type) {\n      case \"video\": return <Video className=\"w-5 h-5\" />;\n      case \"pdf\": return <FileText className=\"w-5 h-5\" />;\n      case \"slide\": return <Image className=\"w-5 h-5\" />;\n      default: return <FileText className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getContentTypeColor = (type: string) => {\n    switch (type) {\n      case \"video\": return \"bg-gradient-to-br from-blue-500/20 to-blue-600/30 text-blue-300 border border-blue-500/20\";\n      case \"pdf\": return \"bg-gradient-to-br from-red-500/20 to-red-600/30 text-red-300 border border-red-500/20\";\n      case \"slide\": return \"bg-gradient-to-br from-green-500/20 to-green-600/30 text-green-300 border border-green-500/20\";\n      default: return \"bg-gradient-to-br from-gray-500/20 to-gray-600/30 text-gray-300 border border-gray-500/20\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <TeacherSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"glass-strong rounded-2xl p-8 text-center\">\n                <Sparkles className=\"w-8 h-8 mx-auto mb-4 text-primary animate-pulse\" />\n                <div className=\"text-lg font-medium\">Loading content library...</div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <TeacherSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <div className=\"glass-strong rounded-3xl p-6 hover-lift\">\n              <h1 className=\"text-4xl font-bold bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n                Content Library\n              </h1>\n              <p className=\"text-muted-foreground mt-3 text-lg\">Manage your educational materials and resources</p>\n            </div>\n          </div>\n\n          <div className=\"flex gap-4 mb-8\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n              <Input\n                placeholder=\"Search your amazing content...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-12 h-12 text-lg glass border-2 hover:border-primary/50 transition-all duration-300\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Button variant=\"outline\" className=\"h-12 px-6 glass hover:glass-strong hover-lift\" data-testid=\"button-filter\">\n              <Filter className=\"w-5 h-5 mr-2\" />\n              Filter\n            </Button>\n            <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"h-12 px-8 bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 hover-lift shadow-lg\" data-testid=\"button-upload\">\n                  <Upload className=\"w-5 h-5 mr-2\" />\n                  Upload Content\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"glass-strong border-primary/20\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-2xl bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                    Upload Educational Content\n                  </DialogTitle>\n                  <DialogDescription>\n                    Share knowledge with your students by uploading videos, PDFs, slides, and more.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-6 py-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"title\" className=\"text-sm font-medium\">Title *</Label>\n                    <Input\n                      id=\"title\"\n                      value={uploadForm.title}\n                      onChange={(e) => setUploadForm({...uploadForm, title: e.target.value})}\n                      placeholder=\"e.g., Introduction to React Hooks\"\n                      className=\"glass border-primary/20\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"content\" className=\"text-sm font-medium\">Description</Label>\n                    <Textarea\n                      id=\"content\"\n                      value={uploadForm.content}\n                      onChange={(e) => setUploadForm({...uploadForm, content: e.target.value})}\n                      placeholder=\"Brief description of the content...\"\n                      className=\"glass border-primary/20 min-h-20\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"type\" className=\"text-sm font-medium\">Content Type</Label>\n                    <Select value={uploadForm.type} onValueChange={(value) => setUploadForm({...uploadForm, type: value as any})}>\n                      <SelectTrigger className=\"glass border-primary/20\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"pdf\">PDF Document</SelectItem>\n                        <SelectItem value=\"video\">Video</SelectItem>\n                        <SelectItem value=\"slide\">Presentation/Slides</SelectItem>\n                        <SelectItem value=\"note\">Notes</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"file\" className=\"text-sm font-medium\">File *</Label>\n                    <Input\n                      id=\"file\"\n                      type=\"file\"\n                      onChange={(e) => setUploadForm({...uploadForm, file: e.target.files?.[0] || null})}\n                      className=\"glass border-primary/20 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:bg-primary/20 file:text-primary hover:file:bg-primary/30\"\n                      accept=\".pdf,.mp4,.pptx,.docx,.txt\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setUploadDialogOpen(false)}\n                    className=\"glass hover:glass-strong\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleUpload}\n                    disabled={uploadMutation.isPending}\n                    className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                  >\n                    {uploadMutation.isPending ? \"Uploading...\" : \"Upload Content\"}\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {!content || content.length === 0 ? (\n            <div className=\"glass-strong rounded-3xl p-12 text-center hover-lift\">\n              <div className=\"relative inline-block mb-6\">\n                <Upload className=\"w-20 h-20 mx-auto text-primary/70\" />\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-r from-secondary to-accent rounded-full flex items-center justify-center\">\n                  <Plus className=\"w-4 h-4 text-white\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-3 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\" data-testid=\"text-no-content\">\n                No content yet\n              </h3>\n              <p className=\"text-muted-foreground mb-8 text-lg max-w-md mx-auto\">\n                Start building your educational library! Upload videos, PDFs, slides, and other materials for your classes.\n              </p>\n              <Button \n                onClick={() => setUploadDialogOpen(true)}\n                className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 hover-lift shadow-xl px-8 py-3 text-lg\" \n                data-testid=\"button-upload-first\"\n              >\n                <Upload className=\"w-5 h-5 mr-3\" />\n                Upload Your First Content\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid gap-6\">\n              {content?.filter(item => \n                item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                item.content?.toLowerCase().includes(searchQuery.toLowerCase())\n              ).map((item) => (\n                <div key={item.id} className=\"glass-strong rounded-2xl p-6 hover-lift border border-primary/10 hover:border-primary/30 transition-all duration-300\">\n                  <div className=\"flex items-start gap-6\">\n                    <div className={`p-4 rounded-xl ${getContentTypeColor(item.type)} shadow-lg`}>\n                      {getContentIcon(item.type)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <h3 className=\"text-xl font-bold truncate bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent\" data-testid={`text-content-title-${item.id}`}>\n                          {item.title}\n                        </h3>\n                        <Badge className={`${getContentTypeColor(item.type)} shadow-sm font-medium px-3 py-1`} data-testid={`badge-type-${item.id}`}>\n                          {item.type.toUpperCase()}\n                        </Badge>\n                      </div>\n                      \n                      {item.content && (\n                        <p className=\"text-muted-foreground mb-4 line-clamp-2 text-base leading-relaxed\" data-testid={`text-content-description-${item.id}`}>\n                          {item.content}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground bg-muted/20 px-3 py-1 rounded-full\" data-testid={`text-content-date-${item.id}`}>\n                          📅 {new Date(item.createdAt!).toLocaleDateString()}\n                        </span>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"glass hover:glass-strong hover-lift\" data-testid={`button-download-${item.id}`}>\n                            <Download className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"glass hover:bg-destructive/20 text-destructive hover:text-destructive hover-lift\" data-testid={`button-delete-content-${item.id}`}>\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":14006},"client/src/pages/teacher-students.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Search, Mail, MessageCircle, MoreHorizontal } from \"lucide-react\";\nimport { TeacherSidebar } from \"@/components/teacher-sidebar\";\nimport { User, Enrollment } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ninterface StudentWithEnrollment extends User {\n  enrollment: Enrollment;\n  className: string;\n}\n\nexport function TeacherStudents() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const { data: students, isLoading } = useQuery<StudentWithEnrollment[]>({\n    queryKey: [\"/api/teacher/students\"],\n  });\n\n  const filteredStudents = students?.filter(student => \n    student.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.className.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <TeacherSidebar />\n        <main className=\"pl-64 p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center\">Loading students...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <TeacherSidebar />\n      <main className=\"pl-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">My Students</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">View and manage students enrolled in your classes</p>\n          </div>\n\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search students by name, email, or class...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-students\"\n              />\n            </div>\n          </div>\n\n          {!filteredStudents || filteredStudents.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid=\"text-no-students\">\n                  {searchQuery ? \"No students found\" : \"No students yet\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  {searchQuery \n                    ? \"Try adjusting your search terms\"\n                    : \"Students will appear here once they enroll in your classes\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {filteredStudents?.map((student) => (\n                <Card key={student.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback data-testid={`avatar-${student.id}`}>\n                          {student.firstName[0]}{student.lastName[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\" data-testid={`text-student-name-${student.id}`}>\n                            {student.firstName} {student.lastName}\n                          </h3>\n                          <Badge \n                            variant={student.enrollment.completed ? \"default\" : \"secondary\"}\n                            data-testid={`badge-status-${student.id}`}\n                          >\n                            {student.enrollment.completed ? \"Completed\" : \"Enrolled\"}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-2\" data-testid={`text-student-email-${student.id}`}>\n                          {student.email}\n                        </p>\n                        \n                        <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\n                          <span data-testid={`text-class-name-${student.id}`}>\n                            Class: {student.className}\n                          </span>\n                          <span data-testid={`text-enrollment-date-${student.id}`}>\n                            Enrolled: {new Date(student.enrollment.enrolledAt!).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-email-${student.id}`}>\n                          <Mail className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-message-${student.id}`}>\n                          <MessageCircle className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${student.id}`}>\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {filteredStudents && filteredStudents.length > 0 && (\n            <div className=\"mt-8 text-center text-gray-600 dark:text-gray-300\">\n              <p data-testid=\"text-student-count\">\n                Showing {filteredStudents.length} of {students?.length} students\n              </p>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":6544}},"version":1}