Authentication

JWT-based login/signup (student & teacher roles).

Secure password hashing with bcrypt.

User profile with name, email, role, avatar.

👨‍🏫 Teacher Features

Create, schedule, and manage live classes (title, subject, date, duration, max students, price).

Upload notes, videos, slides in content library.

Earn ratings from students (performance-based ranking).

Dashboard with income, enrolled students, feedback.

👩‍🎓 Student Features

Browse and enroll in classes (paid/free).

Pay fees online (mock payment integration, e.g., Stripe test).

Join live class → raise hand → teacher selects → converts into 1-1 video call inside class.

View/download notes and recorded videos.

Student progress tracker: enrolled classes, completed lessons, streak.

Rate teachers after class.

📹 Live Class & Chat

Live video classroom (WebRTC / simple integration placeholder).

Raise hand → teacher accepts → student joins as video participant.

Real-time chat inside class.

📂 Content & Courses

Teachers can sell pre-recorded courses.

Notes section (PDF/Docs), video uploads, slides.

Each resource tagged by subject.

📊 Admin Panel (Basic)

View total users, classes, payments.

Block/report abusive users.

📌 Backend (Node.js + Express + MongoDB)

Folder: /backend

REST APIs:

/api/auth/register (student/teacher)

/api/auth/login

/api/user/profile

/api/classes (CRUD)

/api/classes/:id/enroll

/api/content (upload/fetch)

/api/chat/:classId (messages)

/api/user/stats

JWT middleware for auth.

MongoDB models: User, Class, Content, Message, Rating.

Payments → dummy Stripe integration for proof.

📌 Frontend (React/Next.js + TailwindCSS)

Folder: /frontend

Pages:

Login / Signup

Dashboard (separate for student & teacher)

Browse Classes & Courses

Live Class Page (with raise hand + chat + video placeholder)

Content Library

Profile Page

Components:

Navbar, Sidebar, Auth Forms

Teacher Class Form

Student Enrollment & Payment

Rating System

Attendance tracker

Design: modern, aesthetic, new-gen look (Glassmorphism / minimal UI).

📌 Other Requirements

Backend on port 5000, Frontend on port 3000.

.env support for secrets (JWT, MongoDB, Stripe keys).

Include seed data for quick testing (1 teacher, 1 student, 1 class, 1 note, 1 video).

Provide instructions in README:

How to run backend (npm run dev)

How to run frontend (npm run dev)

Default login credentials for demo.

⚡ Task: Generate the entire project codebase with all folders, configs, models, APIs, frontend pages, and components. Make sure it runs directly in Replit without extra setup except installing dependencies.